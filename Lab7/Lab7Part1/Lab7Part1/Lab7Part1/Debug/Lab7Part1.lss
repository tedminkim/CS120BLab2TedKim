
Lab7Part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000063a  000006ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000063a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800104  00800104  000006d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000704  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b1e  00000000  00000000  000007cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a6  00000000  00000000  000012ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000674  00000000  00000000  00001b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  00002204  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052c  00000000  00000000  0000241c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000044b  00000000  00000000  00002948  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002d93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	70 c0       	rjmp	.+224    	; 0xe6 <__bad_interrupt>
   6:	00 00       	nop
   8:	6e c0       	rjmp	.+220    	; 0xe6 <__bad_interrupt>
   a:	00 00       	nop
   c:	6c c0       	rjmp	.+216    	; 0xe6 <__bad_interrupt>
   e:	00 00       	nop
  10:	6a c0       	rjmp	.+212    	; 0xe6 <__bad_interrupt>
  12:	00 00       	nop
  14:	68 c0       	rjmp	.+208    	; 0xe6 <__bad_interrupt>
  16:	00 00       	nop
  18:	66 c0       	rjmp	.+204    	; 0xe6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	64 c0       	rjmp	.+200    	; 0xe6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	62 c0       	rjmp	.+196    	; 0xe6 <__bad_interrupt>
  22:	00 00       	nop
  24:	60 c0       	rjmp	.+192    	; 0xe6 <__bad_interrupt>
  26:	00 00       	nop
  28:	5e c0       	rjmp	.+188    	; 0xe6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5c c0       	rjmp	.+184    	; 0xe6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	5a c0       	rjmp	.+180    	; 0xe6 <__bad_interrupt>
  32:	00 00       	nop
  34:	63 c1       	rjmp	.+710    	; 0x2fc <__vector_13>
  36:	00 00       	nop
  38:	56 c0       	rjmp	.+172    	; 0xe6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	54 c0       	rjmp	.+168    	; 0xe6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	52 c0       	rjmp	.+164    	; 0xe6 <__bad_interrupt>
  42:	00 00       	nop
  44:	50 c0       	rjmp	.+160    	; 0xe6 <__bad_interrupt>
  46:	00 00       	nop
  48:	4e c0       	rjmp	.+156    	; 0xe6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4c c0       	rjmp	.+152    	; 0xe6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	4a c0       	rjmp	.+148    	; 0xe6 <__bad_interrupt>
  52:	00 00       	nop
  54:	48 c0       	rjmp	.+144    	; 0xe6 <__bad_interrupt>
  56:	00 00       	nop
  58:	46 c0       	rjmp	.+140    	; 0xe6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	44 c0       	rjmp	.+136    	; 0xe6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	42 c0       	rjmp	.+132    	; 0xe6 <__bad_interrupt>
  62:	00 00       	nop
  64:	40 c0       	rjmp	.+128    	; 0xe6 <__bad_interrupt>
  66:	00 00       	nop
  68:	3e c0       	rjmp	.+124    	; 0xe6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3c c0       	rjmp	.+120    	; 0xe6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	3a c0       	rjmp	.+116    	; 0xe6 <__bad_interrupt>
  72:	00 00       	nop
  74:	38 c0       	rjmp	.+112    	; 0xe6 <__bad_interrupt>
  76:	00 00       	nop
  78:	36 c0       	rjmp	.+108    	; 0xe6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	34 c0       	rjmp	.+104    	; 0xe6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	32 c0       	rjmp	.+100    	; 0xe6 <__bad_interrupt>
  82:	00 00       	nop
  84:	30 c0       	rjmp	.+96     	; 0xe6 <__bad_interrupt>
  86:	00 00       	nop
  88:	2e c0       	rjmp	.+92     	; 0xe6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	34 02       	muls	r19, r20
  8e:	38 02       	muls	r19, r24
  90:	54 02       	muls	r21, r20
  92:	58 02       	muls	r21, r24
  94:	6d 02       	muls	r22, r29
  96:	71 02       	muls	r23, r17
  98:	86 02       	muls	r24, r22
  9a:	8a 02       	muls	r24, r26
  9c:	c7 02       	muls	r28, r23
  9e:	c7 02       	muls	r28, r23
  a0:	b1 02       	muls	r27, r17
  a2:	c7 02       	muls	r28, r23
  a4:	bb 02       	muls	r27, r27
  a6:	c7 02       	muls	r28, r23
  a8:	ae 02       	muls	r26, r30
  aa:	c7 02       	muls	r28, r23

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	d0 e4       	ldi	r29, 0x40	; 64
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ea e3       	ldi	r30, 0x3A	; 58
  c0:	f6 e0       	ldi	r31, 0x06	; 6
  c2:	00 e0       	ldi	r16, 0x00	; 0
  c4:	0b bf       	out	0x3b, r16	; 59
  c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x14>
  c8:	07 90       	elpm	r0, Z+
  ca:	0d 92       	st	X+, r0
  cc:	a4 30       	cpi	r26, 0x04	; 4
  ce:	b1 07       	cpc	r27, r17
  d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0x10>

000000d2 <__do_clear_bss>:
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	a4 e0       	ldi	r26, 0x04	; 4
  d6:	b1 e0       	ldi	r27, 0x01	; 1
  d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
  da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
  dc:	ab 30       	cpi	r26, 0x0B	; 11
  de:	b2 07       	cpc	r27, r18
  e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
  e2:	60 d2       	rcall	.+1216   	; 0x5a4 <main>
  e4:	a8 c2       	rjmp	.+1360   	; 0x636 <_exit>

000000e6 <__bad_interrupt>:
  e6:	8c cf       	rjmp	.-232    	; 0x0 <__vectors>

000000e8 <LCD_ClearScreen>:
	SREG |= 0x80;
}

void TimerOff() {
	TCCR1B = 0x00;
}
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	cd b7       	in	r28, 0x3d	; 61
  ee:	de b7       	in	r29, 0x3e	; 62
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	1e d0       	rcall	.+60     	; 0x132 <LCD_WriteCommand>
  f6:	00 00       	nop
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <LCD_init>:
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
 106:	84 e6       	ldi	r24, 0x64	; 100
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	86 d0       	rcall	.+268    	; 0x218 <delay_ms>
 10c:	88 e3       	ldi	r24, 0x38	; 56
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	10 d0       	rcall	.+32     	; 0x132 <LCD_WriteCommand>
 112:	86 e0       	ldi	r24, 0x06	; 6
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0d d0       	rcall	.+26     	; 0x132 <LCD_WriteCommand>
 118:	8f e0       	ldi	r24, 0x0F	; 15
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0a d0       	rcall	.+20     	; 0x132 <LCD_WriteCommand>
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	07 d0       	rcall	.+14     	; 0x132 <LCD_WriteCommand>
 124:	8a e0       	ldi	r24, 0x0A	; 10
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	77 d0       	rcall	.+238    	; 0x218 <delay_ms>
 12a:	00 00       	nop
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <LCD_WriteCommand>:
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	1f 92       	push	r1
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62
 13c:	89 83       	std	Y+1, r24	; 0x01
 13e:	8b e2       	ldi	r24, 0x2B	; 43
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	2b e2       	ldi	r18, 0x2B	; 43
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	f9 01       	movw	r30, r18
 148:	20 81       	ld	r18, Z
 14a:	2f 7b       	andi	r18, 0xBF	; 191
 14c:	fc 01       	movw	r30, r24
 14e:	20 83       	st	Z, r18
 150:	88 e2       	ldi	r24, 0x28	; 40
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	29 81       	ldd	r18, Y+1	; 0x01
 156:	fc 01       	movw	r30, r24
 158:	20 83       	st	Z, r18
 15a:	8b e2       	ldi	r24, 0x2B	; 43
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	2b e2       	ldi	r18, 0x2B	; 43
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	f9 01       	movw	r30, r18
 164:	20 81       	ld	r18, Z
 166:	20 68       	ori	r18, 0x80	; 128
 168:	fc 01       	movw	r30, r24
 16a:	20 83       	st	Z, r18
 16c:	00 00       	nop
 16e:	8b e2       	ldi	r24, 0x2B	; 43
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	2b e2       	ldi	r18, 0x2B	; 43
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	f9 01       	movw	r30, r18
 178:	20 81       	ld	r18, Z
 17a:	2f 77       	andi	r18, 0x7F	; 127
 17c:	fc 01       	movw	r30, r24
 17e:	20 83       	st	Z, r18
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	49 d0       	rcall	.+146    	; 0x218 <delay_ms>
 186:	00 00       	nop
 188:	0f 90       	pop	r0
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <LCD_WriteData>:
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	1f 92       	push	r1
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
 19a:	89 83       	std	Y+1, r24	; 0x01
 19c:	8b e2       	ldi	r24, 0x2B	; 43
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	2b e2       	ldi	r18, 0x2B	; 43
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	f9 01       	movw	r30, r18
 1a6:	20 81       	ld	r18, Z
 1a8:	20 64       	ori	r18, 0x40	; 64
 1aa:	fc 01       	movw	r30, r24
 1ac:	20 83       	st	Z, r18
 1ae:	88 e2       	ldi	r24, 0x28	; 40
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	29 81       	ldd	r18, Y+1	; 0x01
 1b4:	fc 01       	movw	r30, r24
 1b6:	20 83       	st	Z, r18
 1b8:	8b e2       	ldi	r24, 0x2B	; 43
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	2b e2       	ldi	r18, 0x2B	; 43
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	f9 01       	movw	r30, r18
 1c2:	20 81       	ld	r18, Z
 1c4:	20 68       	ori	r18, 0x80	; 128
 1c6:	fc 01       	movw	r30, r24
 1c8:	20 83       	st	Z, r18
 1ca:	00 00       	nop
 1cc:	8b e2       	ldi	r24, 0x2B	; 43
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	2b e2       	ldi	r18, 0x2B	; 43
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	f9 01       	movw	r30, r18
 1d6:	20 81       	ld	r18, Z
 1d8:	2f 77       	andi	r18, 0x7F	; 127
 1da:	fc 01       	movw	r30, r24
 1dc:	20 83       	st	Z, r18
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	1a d0       	rcall	.+52     	; 0x218 <delay_ms>
 1e4:	00 00       	nop
 1e6:	0f 90       	pop	r0
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <LCD_Cursor>:
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	1f 92       	push	r1
 1f4:	cd b7       	in	r28, 0x3d	; 61
 1f6:	de b7       	in	r29, 0x3e	; 62
 1f8:	89 83       	std	Y+1, r24	; 0x01
 1fa:	89 81       	ldd	r24, Y+1	; 0x01
 1fc:	81 31       	cpi	r24, 0x11	; 17
 1fe:	20 f4       	brcc	.+8      	; 0x208 <LCD_Cursor+0x1a>
 200:	89 81       	ldd	r24, Y+1	; 0x01
 202:	81 58       	subi	r24, 0x81	; 129
 204:	96 df       	rcall	.-212    	; 0x132 <LCD_WriteCommand>
 206:	03 c0       	rjmp	.+6      	; 0x20e <LCD_Cursor+0x20>
 208:	89 81       	ldd	r24, Y+1	; 0x01
 20a:	81 55       	subi	r24, 0x51	; 81
 20c:	92 df       	rcall	.-220    	; 0x132 <LCD_WriteCommand>
 20e:	00 00       	nop
 210:	0f 90       	pop	r0
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <delay_ms>:
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	00 d0       	rcall	.+0      	; 0x21e <delay_ms+0x6>
 21e:	00 d0       	rcall	.+0      	; 0x220 <delay_ms+0x8>
 220:	00 d0       	rcall	.+0      	; 0x222 <delay_ms+0xa>
 222:	cd b7       	in	r28, 0x3d	; 61
 224:	de b7       	in	r29, 0x3e	; 62
 226:	9e 83       	std	Y+6, r25	; 0x06
 228:	8d 83       	std	Y+5, r24	; 0x05
 22a:	1a 82       	std	Y+2, r1	; 0x02
 22c:	19 82       	std	Y+1, r1	; 0x01
 22e:	13 c0       	rjmp	.+38     	; 0x256 <delay_ms+0x3e>
 230:	1c 82       	std	Y+4, r1	; 0x04
 232:	1b 82       	std	Y+3, r1	; 0x03
 234:	06 c0       	rjmp	.+12     	; 0x242 <delay_ms+0x2a>
 236:	00 00       	nop
 238:	8b 81       	ldd	r24, Y+3	; 0x03
 23a:	9c 81       	ldd	r25, Y+4	; 0x04
 23c:	01 96       	adiw	r24, 0x01	; 1
 23e:	9c 83       	std	Y+4, r25	; 0x04
 240:	8b 83       	std	Y+3, r24	; 0x03
 242:	8b 81       	ldd	r24, Y+3	; 0x03
 244:	9c 81       	ldd	r25, Y+4	; 0x04
 246:	87 30       	cpi	r24, 0x07	; 7
 248:	93 40       	sbci	r25, 0x03	; 3
 24a:	ac f3       	brlt	.-22     	; 0x236 <delay_ms+0x1e>
 24c:	89 81       	ldd	r24, Y+1	; 0x01
 24e:	9a 81       	ldd	r25, Y+2	; 0x02
 250:	01 96       	adiw	r24, 0x01	; 1
 252:	9a 83       	std	Y+2, r25	; 0x02
 254:	89 83       	std	Y+1, r24	; 0x01
 256:	29 81       	ldd	r18, Y+1	; 0x01
 258:	3a 81       	ldd	r19, Y+2	; 0x02
 25a:	8d 81       	ldd	r24, Y+5	; 0x05
 25c:	9e 81       	ldd	r25, Y+6	; 0x06
 25e:	28 17       	cp	r18, r24
 260:	39 07       	cpc	r19, r25
 262:	34 f3       	brlt	.-52     	; 0x230 <delay_ms+0x18>
 264:	00 00       	nop
 266:	26 96       	adiw	r28, 0x06	; 6
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	f8 94       	cli
 26c:	de bf       	out	0x3e, r29	; 62
 26e:	0f be       	out	0x3f, r0	; 63
 270:	cd bf       	out	0x3d, r28	; 61
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	08 95       	ret

00000278 <TimerOn>:
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	cd b7       	in	r28, 0x3d	; 61
 27e:	de b7       	in	r29, 0x3e	; 62
 280:	81 e8       	ldi	r24, 0x81	; 129
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	2b e0       	ldi	r18, 0x0B	; 11
 286:	fc 01       	movw	r30, r24
 288:	20 83       	st	Z, r18
 28a:	88 e8       	ldi	r24, 0x88	; 136
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	2d e7       	ldi	r18, 0x7D	; 125
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	fc 01       	movw	r30, r24
 294:	31 83       	std	Z+1, r19	; 0x01
 296:	20 83       	st	Z, r18
 298:	8f e6       	ldi	r24, 0x6F	; 111
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	22 e0       	ldi	r18, 0x02	; 2
 29e:	fc 01       	movw	r30, r24
 2a0:	20 83       	st	Z, r18
 2a2:	84 e8       	ldi	r24, 0x84	; 132
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	fc 01       	movw	r30, r24
 2a8:	11 82       	std	Z+1, r1	; 0x01
 2aa:	10 82       	st	Z, r1
 2ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2b0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2b4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2b8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 2bc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
 2c0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
 2c4:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
 2c8:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
 2cc:	8f e5       	ldi	r24, 0x5F	; 95
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	2f e5       	ldi	r18, 0x5F	; 95
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	f9 01       	movw	r30, r18
 2d6:	20 81       	ld	r18, Z
 2d8:	20 68       	ori	r18, 0x80	; 128
 2da:	fc 01       	movw	r30, r24
 2dc:	20 83       	st	Z, r18
 2de:	00 00       	nop
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	08 95       	ret

000002e6 <TimerISR>:

void TimerISR() {
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	cd b7       	in	r28, 0x3d	; 61
 2ec:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
}
 2f4:	00 00       	nop
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	08 95       	ret

000002fc <__vector_13>:

ISR(TIMER1_COMPA_vect) {
 2fc:	1f 92       	push	r1
 2fe:	0f 92       	push	r0
 300:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 304:	0f 92       	push	r0
 306:	11 24       	eor	r1, r1
 308:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 30c:	0f 92       	push	r0
 30e:	2f 93       	push	r18
 310:	3f 93       	push	r19
 312:	4f 93       	push	r20
 314:	5f 93       	push	r21
 316:	6f 93       	push	r22
 318:	7f 93       	push	r23
 31a:	8f 93       	push	r24
 31c:	9f 93       	push	r25
 31e:	af 93       	push	r26
 320:	bf 93       	push	r27
 322:	ef 93       	push	r30
 324:	ff 93       	push	r31
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	cd b7       	in	r28, 0x3d	; 61
 32c:	de b7       	in	r29, 0x3e	; 62
	_avr_timer_cntcurr--;
 32e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_cntcurr>
 332:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_cntcurr+0x1>
 336:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x2>
 33a:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x3>
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	a1 09       	sbc	r26, r1
 342:	b1 09       	sbc	r27, r1
 344:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
 348:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
 34c:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
 350:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) {
 354:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_cntcurr>
 358:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_cntcurr+0x1>
 35c:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x2>
 360:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x3>
 364:	89 2b       	or	r24, r25
 366:	8a 2b       	or	r24, r26
 368:	8b 2b       	or	r24, r27
 36a:	89 f4       	brne	.+34     	; 0x38e <__vector_13+0x92>
		TimerISR();
 36c:	bc df       	rcall	.-136    	; 0x2e6 <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 36e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 372:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 376:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 37a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 37e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
 382:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
 386:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
 38a:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
	}
}
 38e:	00 00       	nop
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	ff 91       	pop	r31
 396:	ef 91       	pop	r30
 398:	bf 91       	pop	r27
 39a:	af 91       	pop	r26
 39c:	9f 91       	pop	r25
 39e:	8f 91       	pop	r24
 3a0:	7f 91       	pop	r23
 3a2:	6f 91       	pop	r22
 3a4:	5f 91       	pop	r21
 3a6:	4f 91       	pop	r20
 3a8:	3f 91       	pop	r19
 3aa:	2f 91       	pop	r18
 3ac:	0f 90       	pop	r0
 3ae:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 3b2:	0f 90       	pop	r0
 3b4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 3b8:	0f 90       	pop	r0
 3ba:	1f 90       	pop	r1
 3bc:	18 95       	reti

000003be <TimerSet>:

void TimerSet(unsigned long M) {
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	00 d0       	rcall	.+0      	; 0x3c4 <TimerSet+0x6>
 3c4:	00 d0       	rcall	.+0      	; 0x3c6 <TimerSet+0x8>
 3c6:	cd b7       	in	r28, 0x3d	; 61
 3c8:	de b7       	in	r29, 0x3e	; 62
 3ca:	69 83       	std	Y+1, r22	; 0x01
 3cc:	7a 83       	std	Y+2, r23	; 0x02
 3ce:	8b 83       	std	Y+3, r24	; 0x03
 3d0:	9c 83       	std	Y+4, r25	; 0x04
	_avr_timer_M = M;
 3d2:	89 81       	ldd	r24, Y+1	; 0x01
 3d4:	9a 81       	ldd	r25, Y+2	; 0x02
 3d6:	ab 81       	ldd	r26, Y+3	; 0x03
 3d8:	bc 81       	ldd	r27, Y+4	; 0x04
 3da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 3de:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3e2:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 3e6:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 3ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3f2:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 3f6:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 3fa:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
 3fe:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
 402:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
 406:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
}
 40a:	00 00       	nop
 40c:	0f 90       	pop	r0
 40e:	0f 90       	pop	r0
 410:	0f 90       	pop	r0
 412:	0f 90       	pop	r0
 414:	df 91       	pop	r29
 416:	cf 91       	pop	r28
 418:	08 95       	ret

0000041a <TickButtonCount>:

enum States{Start, Init, Incr, Wait1, Decr, Wait2, Reset, Wait3} state;
//unsigned char countHold = 0x00;


void TickButtonCount() {
 41a:	cf 93       	push	r28
 41c:	df 93       	push	r29
 41e:	00 d0       	rcall	.+0      	; 0x420 <TickButtonCount+0x6>
 420:	cd b7       	in	r28, 0x3d	; 61
 422:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempA0 = PINA & 0x01;
 424:	80 e2       	ldi	r24, 0x20	; 32
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	fc 01       	movw	r30, r24
 42a:	80 81       	ld	r24, Z
 42c:	81 70       	andi	r24, 0x01	; 1
 42e:	89 83       	std	Y+1, r24	; 0x01
	unsigned char tempA1 = PINA & 0x02;
 430:	80 e2       	ldi	r24, 0x20	; 32
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	fc 01       	movw	r30, r24
 436:	80 81       	ld	r24, Z
 438:	82 70       	andi	r24, 0x02	; 2
 43a:	8a 83       	std	Y+2, r24	; 0x02
	switch (state) {
 43c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <state>
 440:	88 2f       	mov	r24, r24
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	09 2e       	mov	r0, r25
 446:	00 0c       	add	r0, r0
 448:	aa 0b       	sbc	r26, r26
 44a:	bb 0b       	sbc	r27, r27
 44c:	40 e0       	ldi	r20, 0x00	; 0
 44e:	50 e0       	ldi	r21, 0x00	; 0
 450:	27 e0       	ldi	r18, 0x07	; 7
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	84 1b       	sub	r24, r20
 456:	95 0b       	sbc	r25, r21
 458:	28 17       	cp	r18, r24
 45a:	39 07       	cpc	r19, r25
 45c:	08 f4       	brcc	.+2      	; 0x460 <TickButtonCount+0x46>
 45e:	68 c0       	rjmp	.+208    	; 0x530 <TickButtonCount+0x116>
 460:	8a 5b       	subi	r24, 0xBA	; 186
 462:	9f 4f       	sbci	r25, 0xFF	; 255
 464:	fc 01       	movw	r30, r24
 466:	de c0       	rjmp	.+444    	; 0x624 <__tablejump2__>
		case Start:
		state = Init;
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
		break;
 46e:	61 c0       	rjmp	.+194    	; 0x532 <TickButtonCount+0x118>
		case Init:
		if (tempA0 && tempA1) {
 470:	89 81       	ldd	r24, Y+1	; 0x01
 472:	88 23       	and	r24, r24
 474:	39 f0       	breq	.+14     	; 0x484 <TickButtonCount+0x6a>
 476:	8a 81       	ldd	r24, Y+2	; 0x02
 478:	88 23       	and	r24, r24
 47a:	21 f0       	breq	.+8      	; 0x484 <TickButtonCount+0x6a>
			state = Reset;
 47c:	86 e0       	ldi	r24, 0x06	; 6
 47e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
			state = Incr;
		}
		else {
			state = Init;
		}
		break;
 482:	57 c0       	rjmp	.+174    	; 0x532 <TickButtonCount+0x118>
		break;
		case Init:
		if (tempA0 && tempA1) {
			state = Reset;
		}
		else if (tempA1) {
 484:	8a 81       	ldd	r24, Y+2	; 0x02
 486:	88 23       	and	r24, r24
 488:	21 f0       	breq	.+8      	; 0x492 <TickButtonCount+0x78>
			state = Decr;
 48a:	84 e0       	ldi	r24, 0x04	; 4
 48c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
			state = Incr;
		}
		else {
			state = Init;
		}
		break;
 490:	50 c0       	rjmp	.+160    	; 0x532 <TickButtonCount+0x118>
			state = Reset;
		}
		else if (tempA1) {
			state = Decr;
		}
		else if (tempA0) {
 492:	89 81       	ldd	r24, Y+1	; 0x01
 494:	88 23       	and	r24, r24
 496:	21 f0       	breq	.+8      	; 0x4a0 <TickButtonCount+0x86>
			state = Incr;
 498:	82 e0       	ldi	r24, 0x02	; 2
 49a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
		}
		else {
			state = Init;
		}
		break;
 49e:	49 c0       	rjmp	.+146    	; 0x532 <TickButtonCount+0x118>
		}
		else if (tempA0) {
			state = Incr;
		}
		else {
			state = Init;
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
		}
		break;
 4a6:	45 c0       	rjmp	.+138    	; 0x532 <TickButtonCount+0x118>
		case Incr:
		state = Wait1;
 4a8:	83 e0       	ldi	r24, 0x03	; 3
 4aa:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
		break;
 4ae:	41 c0       	rjmp	.+130    	; 0x532 <TickButtonCount+0x118>
		case Wait1:
		if (tempA0) {
 4b0:	89 81       	ldd	r24, Y+1	; 0x01
 4b2:	88 23       	and	r24, r24
 4b4:	21 f0       	breq	.+8      	; 0x4be <TickButtonCount+0xa4>
			state = Incr;
 4b6:	82 e0       	ldi	r24, 0x02	; 2
 4b8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
			state = Reset;
		}
		else {
			state = Init;
		}
		break;
 4bc:	3a c0       	rjmp	.+116    	; 0x532 <TickButtonCount+0x118>
		break;
		case Wait1:
		if (tempA0) {
			state = Incr;
		}
		else if (tempA0 && tempA1 ) {
 4be:	89 81       	ldd	r24, Y+1	; 0x01
 4c0:	88 23       	and	r24, r24
 4c2:	39 f0       	breq	.+14     	; 0x4d2 <TickButtonCount+0xb8>
 4c4:	8a 81       	ldd	r24, Y+2	; 0x02
 4c6:	88 23       	and	r24, r24
 4c8:	21 f0       	breq	.+8      	; 0x4d2 <TickButtonCount+0xb8>
			state = Reset;
 4ca:	86 e0       	ldi	r24, 0x06	; 6
 4cc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
		}
		else {
			state = Init;
		}
		break;
 4d0:	30 c0       	rjmp	.+96     	; 0x532 <TickButtonCount+0x118>
		}
		else if (tempA0 && tempA1 ) {
			state = Reset;
		}
		else {
			state = Init;
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
		}
		break;
 4d8:	2c c0       	rjmp	.+88     	; 0x532 <TickButtonCount+0x118>
		case Decr:
		state = Wait2;
 4da:	85 e0       	ldi	r24, 0x05	; 5
 4dc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
		break;
 4e0:	28 c0       	rjmp	.+80     	; 0x532 <TickButtonCount+0x118>
		case Wait2:
		if (tempA1) {
 4e2:	8a 81       	ldd	r24, Y+2	; 0x02
 4e4:	88 23       	and	r24, r24
 4e6:	21 f0       	breq	.+8      	; 0x4f0 <TickButtonCount+0xd6>
			state = Decr;
 4e8:	84 e0       	ldi	r24, 0x04	; 4
 4ea:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
			state = Reset;
		}
		else {
			state = Init;
		}
		break;
 4ee:	21 c0       	rjmp	.+66     	; 0x532 <TickButtonCount+0x118>
		break;
		case Wait2:
		if (tempA1) {
			state = Decr;
		}
		else if (tempA0 && tempA1) {
 4f0:	89 81       	ldd	r24, Y+1	; 0x01
 4f2:	88 23       	and	r24, r24
 4f4:	39 f0       	breq	.+14     	; 0x504 <TickButtonCount+0xea>
 4f6:	8a 81       	ldd	r24, Y+2	; 0x02
 4f8:	88 23       	and	r24, r24
 4fa:	21 f0       	breq	.+8      	; 0x504 <TickButtonCount+0xea>
			state = Reset;
 4fc:	86 e0       	ldi	r24, 0x06	; 6
 4fe:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
		}
		else {
			state = Init;
		}
		break;
 502:	17 c0       	rjmp	.+46     	; 0x532 <TickButtonCount+0x118>
		}
		else if (tempA0 && tempA1) {
			state = Reset;
		}
		else {
			state = Init;
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
		}
		break;
 50a:	13 c0       	rjmp	.+38     	; 0x532 <TickButtonCount+0x118>
		case Reset:
		state = Wait3;
 50c:	87 e0       	ldi	r24, 0x07	; 7
 50e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
		break;
 512:	0f c0       	rjmp	.+30     	; 0x532 <TickButtonCount+0x118>
		case Wait3:
		if ((tempA0) || (tempA1)) {
 514:	89 81       	ldd	r24, Y+1	; 0x01
 516:	88 23       	and	r24, r24
 518:	19 f4       	brne	.+6      	; 0x520 <TickButtonCount+0x106>
 51a:	8a 81       	ldd	r24, Y+2	; 0x02
 51c:	88 23       	and	r24, r24
 51e:	21 f0       	breq	.+8      	; 0x528 <TickButtonCount+0x10e>
			state = Reset;
 520:	86 e0       	ldi	r24, 0x06	; 6
 522:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
		}
		else {
			state = Init;
		}
		break;
 526:	05 c0       	rjmp	.+10     	; 0x532 <TickButtonCount+0x118>
		case Wait3:
		if ((tempA0) || (tempA1)) {
			state = Reset;
		}
		else {
			state = Init;
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
		}
		break;
 52e:	01 c0       	rjmp	.+2      	; 0x532 <TickButtonCount+0x118>
		default:
		break;
 530:	00 00       	nop
	}
	switch (state) {
 532:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <state>
 536:	88 2f       	mov	r24, r24
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	09 2e       	mov	r0, r25
 53c:	00 0c       	add	r0, r0
 53e:	aa 0b       	sbc	r26, r26
 540:	bb 0b       	sbc	r27, r27
 542:	40 e0       	ldi	r20, 0x00	; 0
 544:	50 e0       	ldi	r21, 0x00	; 0
 546:	27 e0       	ldi	r18, 0x07	; 7
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	84 1b       	sub	r24, r20
 54c:	95 0b       	sbc	r25, r21
 54e:	28 17       	cp	r18, r24
 550:	39 07       	cpc	r19, r25
 552:	d8 f0       	brcs	.+54     	; 0x58a <TickButtonCount+0x170>
 554:	82 5b       	subi	r24, 0xB2	; 178
 556:	9f 4f       	sbci	r25, 0xFF	; 255
 558:	fc 01       	movw	r30, r24
 55a:	64 c0       	rjmp	.+200    	; 0x624 <__tablejump2__>
		//countHold = 7;
		break;
		case Init:
		break;
		case Reset:
		countHold = 0;
 55c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <countHold>
		break;
 560:	1b c0       	rjmp	.+54     	; 0x598 <TickButtonCount+0x17e>
		case Incr:
		if (countHold < 9) {
 562:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <countHold>
 566:	89 30       	cpi	r24, 0x09	; 9
 568:	a0 f4       	brcc	.+40     	; 0x592 <TickButtonCount+0x178>
			countHold = countHold + 1;
 56a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <countHold>
 56e:	8f 5f       	subi	r24, 0xFF	; 255
 570:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <countHold>
		}
		break;
 574:	0e c0       	rjmp	.+28     	; 0x592 <TickButtonCount+0x178>
		case Wait1:
		break;
		case Wait2:
		break;
		case Decr:
		if (countHold > 0) {
 576:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <countHold>
 57a:	88 23       	and	r24, r24
 57c:	61 f0       	breq	.+24     	; 0x596 <TickButtonCount+0x17c>
			countHold = countHold - 1;
 57e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <countHold>
 582:	81 50       	subi	r24, 0x01	; 1
 584:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <countHold>
		}
		break;
 588:	06 c0       	rjmp	.+12     	; 0x596 <TickButtonCount+0x17c>
		case Wait3:
		break;
		default:
		break;
 58a:	00 00       	nop
 58c:	05 c0       	rjmp	.+10     	; 0x598 <TickButtonCount+0x17e>
		if (countHold > 0) {
			countHold = countHold - 1;
		}
		break;
		case Wait3:
		break;
 58e:	00 00       	nop
 590:	03 c0       	rjmp	.+6      	; 0x598 <TickButtonCount+0x17e>
		break;
		case Incr:
		if (countHold < 9) {
			countHold = countHold + 1;
		}
		break;
 592:	00 00       	nop
 594:	01 c0       	rjmp	.+2      	; 0x598 <TickButtonCount+0x17e>
		break;
		case Decr:
		if (countHold > 0) {
			countHold = countHold - 1;
		}
		break;
 596:	00 00       	nop
		case Wait3:
		break;
		default:
		break;
	}
}
 598:	00 00       	nop
 59a:	0f 90       	pop	r0
 59c:	0f 90       	pop	r0
 59e:	df 91       	pop	r29
 5a0:	cf 91       	pop	r28
 5a2:	08 95       	ret

000005a4 <main>:

int main(void) {
 5a4:	cf 93       	push	r28
 5a6:	df 93       	push	r29
 5a8:	cd b7       	in	r28, 0x3d	; 61
 5aa:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00;
 5ac:	81 e2       	ldi	r24, 0x21	; 33
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	fc 01       	movw	r30, r24
 5b2:	10 82       	st	Z, r1
	DDRC = 0xFF;
 5b4:	87 e2       	ldi	r24, 0x27	; 39
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	2f ef       	ldi	r18, 0xFF	; 255
 5ba:	fc 01       	movw	r30, r24
 5bc:	20 83       	st	Z, r18
	DDRD = 0xFF;
 5be:	8a e2       	ldi	r24, 0x2A	; 42
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	2f ef       	ldi	r18, 0xFF	; 255
 5c4:	fc 01       	movw	r30, r24
 5c6:	20 83       	st	Z, r18
	PORTA = 0xFF;
 5c8:	82 e2       	ldi	r24, 0x22	; 34
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	2f ef       	ldi	r18, 0xFF	; 255
 5ce:	fc 01       	movw	r30, r24
 5d0:	20 83       	st	Z, r18
	PORTC = 0x00;
 5d2:	88 e2       	ldi	r24, 0x28	; 40
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	fc 01       	movw	r30, r24
 5d8:	10 82       	st	Z, r1
	PORTD = 0x00;
 5da:	8b e2       	ldi	r24, 0x2B	; 43
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	fc 01       	movw	r30, r24
 5e0:	10 82       	st	Z, r1



	//unsigned char tempValA = 0x00;
	//unsigned char tempValC = 0x00;
	TimerSet(1000);
 5e2:	68 ee       	ldi	r22, 0xE8	; 232
 5e4:	73 e0       	ldi	r23, 0x03	; 3
 5e6:	80 e0       	ldi	r24, 0x00	; 0
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	e9 de       	rcall	.-558    	; 0x3be <TimerSet>
	TimerOn();
 5ec:	45 de       	rcall	.-886    	; 0x278 <TimerOn>
	LCD_init();
 5ee:	87 dd       	rcall	.-1266   	; 0xfe <LCD_init>
 5f0:	7b dd       	rcall	.-1290   	; 0xe8 <LCD_ClearScreen>
	LCD_ClearScreen();
 5f2:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <countHold>
	countHold = 0;
 5f6:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <state>
	//unsigned char tempValB = PORTB;
	state = Start;

	while(1) {
		LCD_Cursor(1);
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	f8 dd       	rcall	.-1040   	; 0x1ee <LCD_Cursor>
 5fe:	0d df       	rcall	.-486    	; 0x41a <TickButtonCount>
		TickButtonCount();
 600:	88 e2       	ldi	r24, 0x28	; 40
 602:	90 e0       	ldi	r25, 0x00	; 0
		PORTC = countHold;
 604:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <countHold>
 608:	fc 01       	movw	r30, r24
 60a:	20 83       	st	Z, r18
 60c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <countHold>
		LCD_WriteData(countHold + '0');
 610:	80 5d       	subi	r24, 0xD0	; 208
 612:	be dd       	rcall	.-1156   	; 0x190 <LCD_WriteData>
 614:	00 00       	nop
 616:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
		while (!TimerFlag) {}
 61a:	88 23       	and	r24, r24
 61c:	e1 f3       	breq	.-8      	; 0x616 <main+0x72>
 61e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
		TimerFlag = 0;
 622:	eb cf       	rjmp	.-42     	; 0x5fa <main+0x56>

00000624 <__tablejump2__>:
 624:	ee 0f       	add	r30, r30
		//tempValB = out;
		//PORTC = countHold;
	}
 626:	ff 1f       	adc	r31, r31
 628:	00 24       	eor	r0, r0
 62a:	00 1c       	adc	r0, r0
 62c:	0b be       	out	0x3b, r0	; 59
 62e:	07 90       	elpm	r0, Z+
 630:	f6 91       	elpm	r31, Z
 632:	e0 2d       	mov	r30, r0
 634:	09 94       	ijmp

00000636 <_exit>:
 636:	f8 94       	cli

00000638 <__stop_program>:
 638:	ff cf       	rjmp	.-2      	; 0x638 <__stop_program>
