
tkim094_lab2_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000132  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000875  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000078e  00000000  00000000  00000a39  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000276  00000000  00000000  000011c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001440  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000441  00000000  00000000  00001464  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009f  00000000  00000000  000018a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001944  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	1f c0       	rjmp	.+62     	; 0xda <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include “simAVRHeader.h”
#endif


int main(void) {
  DDRA = 0x00;
  9e:	11 b8       	out	0x01, r1	; 1
  DDRC = 0xFF;
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	87 b9       	out	0x07, r24	; 7
  PORTA = 0xFF;
  a4:	82 b9       	out	0x02, r24	; 2
  PORTC = 0x00;
  a6:	18 b8       	out	0x08, r1	; 8

  while(1) {
    cntavail = 0x00;

    tmpValA = PINA & 0x01; // this is BITWISE.
    if (tmpValA == 0x01) {
  a8:	21 e0       	ldi	r18, 0x01	; 1
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	82 2f       	mov	r24, r18
  ae:	00 9b       	sbis	0x00, 0	; 0
  b0:	83 2f       	mov	r24, r19
      cntavail = cntavail - 1;
    }
    tmpValA1 = PINA & 0x02; // this is BITWISE.
    if (tmpValA1 == 0x02) {
  b2:	01 99       	sbic	0x00, 1	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <main+0x1c>

  while(1) {
    cntavail = 0x00;

    tmpValA = PINA & 0x01; // this is BITWISE.
    if (tmpValA == 0x01) {
  b6:	81 95       	neg	r24
  b8:	01 c0       	rjmp	.+2      	; 0xbc <main+0x1e>
      cntavail = cntavail - 1;
    }
    tmpValA1 = PINA & 0x02; // this is BITWISE.
    if (tmpValA1 == 0x02) {
      cntavail = cntavail - 1;
  ba:	80 95       	com	r24
    }
    tmpValA2 = PINA & 0x04; // this is BITWISE.
    if (tmpValA2 == 0x04) {
  bc:	02 99       	sbic	0x00, 2	; 0
      cntavail = cntavail - 1;
  be:	81 50       	subi	r24, 0x01	; 1
    }
    tmpValA3 = PINA & 0x08; // this is BITWISE.
    if (tmpValA3 == 0x08) {
  c0:	03 99       	sbic	0x00, 3	; 0
      cntavail = cntavail - 1;
  c2:	81 50       	subi	r24, 0x01	; 1
    }
    tmpValA4 = PINA & 0x0F;
  c4:	90 b1       	in	r25, 0x00	; 0
    if (tmpValA4 == 0x0F || cntavail == 0) {
  c6:	9f 70       	andi	r25, 0x0F	; 15
  c8:	9f 30       	cpi	r25, 0x0F	; 15
  ca:	21 f0       	breq	.+8      	; 0xd4 <main+0x36>
  cc:	81 11       	cpse	r24, r1
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <main+0x38>
      cntavail = 0x80;
  d0:	80 e8       	ldi	r24, 0x80	; 128
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <main+0x38>
  d4:	80 e8       	ldi	r24, 0x80	; 128
    }
    PORTC = cntavail;
  d6:	88 b9       	out	0x08, r24	; 8
  }
  d8:	e9 cf       	rjmp	.-46     	; 0xac <main+0xe>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
