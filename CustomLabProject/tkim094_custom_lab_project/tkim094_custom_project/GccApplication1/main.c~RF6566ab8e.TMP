/*	Author: Ted Kim
 *  Email: tkim094@ucr.edu
 *  Partner(s) Name: None
 *	Lab Section: 023 (Tuesdays & Thursdays 2-3:20 PM)
 *	Assignment: Custom Laboratory Project
 *	Exercise Description: iBreadBoard
 *
 *	I acknowledge all content contained herein, excluding template or example
 *	code, is my own original work.
 */

 typedef struct _task {
	signed char state;
	unsigned long int period;
	unsigned long int elapsedTime;
	int (*TickFct) (int);
} task;
/*
 //NOKIA LCD 5110
 #define F_CPU 8000000UL
 #define LCD_RST_SET PORTD |= (1 << 0)
 #define LCD_RST_clr  PORTD &=~ (1<<0)

 #define LCD_DC_set   PORTD |=  (1<<1)
 #define LCD_DC_clr   PORTD &=~ (1<<1)

 #define SDIN_set     PORTD |=  (1<<2)
 #define SDIN_clr     PORTD &=~ (1<<2)

 #define SCLK_set     PORTD |=  (1<<3)
 #define SCLK_clr     PORTD &= ~(1<<3)
 const unsigned char font6x8[][6] =
{
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // sp
	{ 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
	{ 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
	{ 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
	{ 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $
	{ 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %
	{ 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
	{ 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
	{ 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
	{ 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
	{ 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
	{ 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
	{ 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 },   // ,
	{ 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -
	{ 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
	{ 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
	{ 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
	{ 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
	{ 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
	{ 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
	{ 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
	{ 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
	{ 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
	{ 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
	{ 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
	{ 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
	{ 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
	{ 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
	{ 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
	{ 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
	{ 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
	{ 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
	{ 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
	{ 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A
	{ 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
	{ 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
	{ 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
	{ 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
	{ 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
	{ 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
	{ 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
	{ 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
	{ 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
	{ 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
	{ 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
	{ 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
	{ 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
	{ 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
	{ 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
	{ 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
	{ 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
	{ 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
	{ 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
	{ 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
	{ 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
	{ 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
	{ 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
	{ 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
	{ 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
	{ 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [
	{ 0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55 },   // 55
	{ 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
	{ 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
	{ 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
	{ 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
	{ 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
	{ 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
	{ 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
	{ 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
	{ 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
	{ 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
	{ 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g
	{ 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
	{ 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
	{ 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j
	{ 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
	{ 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
	{ 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
	{ 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
	{ 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
	{ 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p
	{ 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q
	{ 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
	{ 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
	{ 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
	{ 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
	{ 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
	{ 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
	{ 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
	{ 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y
	{ 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
	{ 0x14, 0x14, 0x14, 0x14, 0x14, 0x14 }    // horiz lines
};

void LCD_write_byte(unsigned char dat, unsigned char command)
{
	unsigned char i;

	if (command == 1) {
		LCD_DC_clr;
	}

	else {
		LCD_DC_set;
	}

	for(i=0;i<8;i++)
	{
		if(dat&0x80)
		SDIN_set;
		else
		SDIN_clr;
		SCLK_clr;
		dat = dat << 1;
		SCLK_set;
	}
}

void LCD_wait()
{
	LCD_RST_clr;
	_delay_us(1);
	LCD_RST_set;

	_delay_us(1);

	LCD_write_byte(0x21, 1); // set LCD mode
	LCD_write_byte(0xc8, 1); // set bias voltage
	LCD_write_byte(0x06, 1); // temperature correction
	LCD_write_byte(0x13, 1); // 1:48
	LCD_write_byte(0x20, 1); // use bias command, vertical
	LCD_write_byte(0x0c, 1); // set LCD mode,display normally
	LCD_clear();             // clear the LCD
}

void LCD_clear()
{
	unsigned int i;

	LCD_write_byte(0x0c, 1);
	LCD_write_byte(0x80, 1);

	for (i=0; i<504; i++)
	{
		LCD_write_byte(0, 0);
	}
}

void LCD_set_XY(unsigned char X, unsigned char Y)
{
	LCD_write_byte(0x40 | Y, 1); // column
	LCD_write_byte(0x80 | X, 1);    // row
}

void LCD_write_char(unsigned char c)
{
	unsigned char line;

	c -= 32;

	for (line=0; line<6; line++) {
		LCD_write_byte(font6x8[c][line], 0);
	}
}

void LCD_write_english_string(unsigned char X,unsigned char Y,char *s)
{
	LCD_set_XY(X,Y);
	while (*s)
	{
		LCD_write_char(*s);
		s++;
	}
}
//END OF NOKI LCD 5110
*/
#include <avr/io.h>
#ifdef _SIMULATE_
#include "simAVRHeader.h"
#endif
#include <avr/interrupt.h>

volatile unsigned char TimerFlag = 0;
unsigned long _avr_timer_M = 1;
unsigned long _avr_timer_cntcurr = 0;





void TimerOn() {
	TCCR2B = 0x0B;
	OCR2A = 125;
	TIMSK2 = 0x02;
	TCNT2 = 0;
	_avr_timer_cntcurr = _avr_timer_M;
	SREG |= 0x80;
}
void TimerOff() {
	TCCR2B = 0x00;
}
void TimerISR() {
	TimerFlag = 1;
}
ISR(TIMER2_COMPA_vect) {
	_avr_timer_cntcurr--;
	if (_avr_timer_cntcurr == 0) {
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
	_avr_timer_cntcurr = _avr_timer_M;
}

void set_PWM(double frequency) { //PB6
	static double current_frequency;
	if (frequency != current_frequency) {
		if (!frequency) { TCCR3B &= 0x08; }
		else { TCCR3B |= 0x03; }

		if (frequency < 0.954) { OCR3A = 0xFFFF; }
		else if (frequency > 31250) {OCR3A = 0x0000; }
		else {OCR3A = (short)(8000000 / (128 * frequency)) + 0; }

		TCNT3 = 0;
		current_frequency = frequency;
	}
}
void PWM_on() {
	TCCR3A = (1 << COM3A0);
	TCCR3B = (1 << WGM32) | (1 << CS31) | (1 << CS30);
	set_PWM(0);
}
void PWM_off() {
	TCCR3A = 0x00;
	TCCR3B = 0x00;
}





void set_PWMB(double frequency) { // PD5
	static double current_frequency;
	if (frequency != current_frequency) {
		if (!frequency) { TCCR1B &= 0x08; }
		else { TCCR1B |= 0x03; }

		if (frequency < 0.954) { OCR1A = 0xFFFF; }
		else if (frequency > 31250) {OCR1A = 0x0000; }
		else {OCR1A = (short)(8000000 / (128 * frequency)) + 0; }

		TCNT1 = 0;
		current_frequency = frequency;
	}
}
void PWMB_on() {
	TCCR1A = (1 << COM1A0);
	TCCR1B = (1 << WGM12) | (1 << CS11) | (1 << CS10);
	set_PWMB(0);
}
void PWMB_off() {
	TCCR1A = 0x00;
	TCCR1B = 0x00;
}

void set_PWMH(double frequency) { // PB3
	static double current_frequency;
	if (frequency != current_frequency) {
		if (!frequency) { TCCR0B &= 0x08; TCCR0A |= 0x03; }
		else { TCCR0B |= 0x05; }

		if (frequency < 31) { OCR0A = 0xFF; }
		else if (frequency > 3906) {OCR0A = 0x0000; }
		else {OCR0A = (short)(8000000 / (2* 1024 * frequency)) + 0.50; }

		TCNT0 = 0;
		current_frequency = frequency;
	}
}
void PWMH_on() {
	TCCR0A = (1 << COM0A0);
	TCCR0B = (1 << WGM02) | (1<< WGM01) | (1 << WGM00) | (1 << CS02) | (1 << CS00);
	set_PWMH(0);
}
void PWMH_off() {
	TCCR0A = 0x00;
	TCCR0B = 0x00;
}
/*
void play(double frequencyVal) {
	set_PWM(frequencyVal);
}
void silence() {
	set_PWM(0);
}
void playH(double frequencyVal) {
	set_PWMH(frequencyVal);
}
void silenceH() {
	set_PWMH(0);
}*/
void play(short freqSound) {
	//buzzerSound = 0; //dud
	set_PWM(freqSound);
}
//void rest(short arrayVal) {
	//for (short i = 0; i < arrayVal; i++) {
		//while(!TimerFlag) {}
		//TimerFlag = 0;
	//}
//}
void silence() {
	//buzzerSound = 0; //dud
	set_PWM(0);
}
void playH(short freqSound) {
	//buzzerSound = 0; //dud
	set_PWMH(freqSound);
}
//void restH(short arrayVal) {
//	for (short i = 0; i < arrayVal; i++) {
		//while(!TimerFlag) {}
		//TimerFlag = 0;
//	}
//}
void silenceH() {
	//buzzerSound = 0; //dud
	set_PWMH(0);
}
void playB(short freqSound) {
  //buzzerSound = 0;
  set_PWMB(freqSound);
}
//void restB(short arrayVal) {
  //for (short i = 0; i < arrayVal; i++) {
    //while(!TimerFlag) {}
    //TimerFlag = 0;
  //}
//}
void silenceB() {
  //buzzerSound = 0;
  set_PWMB(0);
}

//MUSIC NOTES
#define C 130.8 * 2
#define CS 138.6 * 2 //also known as D FLAT
#define D 146.8 * 2
#define DS 155.6 * 2 //ALSO KNOWN AS E FLAT
#define E 164.8 * 2
#define F 174.6 * 2
#define FS  185 * 2//ALSO KNOWN AS G FLAT
#define G 196 * 2
#define GS 207.7 * 2//ALSO KNOWN AS A FLAT
#define A 220 * 2
#define AS 233.1 * 2//ALSO KNOWN AS B FLAT
#define B 246.9 * 2


//END OF MUSIC NOTES

//REST LENGTHS

//#define QUARTER 75/2
//#define HALF 75
//#define THREEFOURTHS 150
//#define WHOLE 400

//END OF REST LENGTHS

//NOTE LENGTHS
//test song mary had a little lamb
short testSong[] = {E, D, C, D, E, E, E, D, D, D, E, G, G, E, D, C, D, E, E, E, E, D, D, E, D, C};
short testSongNoteLengths[] = {300, 300, 300, 300, 300, 300, 600, 300, 300, 600, 300, 300, 600, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 1000};
short testSongRestLengths[] = {25, 25, 25, 25, 50, 50, 150, 50, 50, 150, 50, 50, 150, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 150};
short testSong2[] = {G, F, E, F, G, G, G, F, F, F, G, C*2, C*2, G, F, E, F, G, G, G, G, F, F, G, F, E};
//short testSongH[] = {F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F};
short testSongNoteLengths2[] = {300, 300, 300, 300, 300, 300, 600, 300, 300, 600, 300, 300, 600, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 1000};
short testSongRestLengths2[] = {25, 25, 25, 25, 50, 50, 150, 50, 50, 150, 50, 50, 150, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 150};

short testSong3[] = {C/2, B/2, A/2, B/2, C/2, C/2, C/2, B/2, B/2, B/2, C/2, E, E, C/2, B/2, A/2, B/2, C/2, C/2, C/2, C/2, B/2, B/2, C/2, A/2, G/2};
//short testSongH[] = {F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F};
short testSongNoteLengths3[] = {300, 300, 300, 300, 300, 300, 600, 300, 300, 600, 300, 300, 600, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 1000};
short testSongRestLengths3[] = {25, 25, 25, 25, 50, 50, 150, 50, 50, 150, 50, 50, 150, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 150};
//harmony done
//melody done

//test song mary had a little lamb
//COMMENTED FOR KNOWN
/*
short testSongH[] = {G, F, E, F, G, G, G, F, F, F, G, C*2, C*2, G, F, E, F, G, G, G, G, F, F, G, F, E};
//short testSongH[] = {F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F};
short testSongNoteLengthsH[] = {300, 300, 300, 300, 300, 300, 600, 300, 300, 600, 300, 300, 600, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 1000};
short testSongRestLengthsH[] = {25, 25, 25, 25, 50, 50, 150, 50, 50, 150, 50, 50, 150, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 150};

short testSongB[] = {C/2, B/2, A/2, B/2, C/2, C/2, C/2, B/2, B/2, B/2, C/2, E, E, C/2, B/2, A/2, B/2, C/2, C/2, C/2, C/2, B/2, B/2, C/2, A/2, G/2};
//short testSongH[] = {F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F};
short testSongNoteLengthsB[] = {300, 300, 300, 300, 300, 300, 600, 300, 300, 600, 300, 300, 600, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 1000};
short testSongRestLengthsB[] = {25, 25, 25, 25, 50, 50, 150, 50, 50, 150, 50, 50, 150, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 150};
//harmony done


*/


//unsigned char SetBit(unsigned char pin, unsigned char number, unsigned char bin_value)
//{
	//return (bin_value ? pin | (0x01 << number) : pin & ~(0x01 << number));/
//}

////////////////////////////////////////////////////////////////////////////////
//Functionality - Gets bit from a PINx
//Parameter: Takes in a uChar for a PINx and the pin number
//Returns: The value of the PINx
/*unsigned char GetBit(unsigned char port, unsigned char number)
{
	return ( port & (0x01 << number) );
}*/
//unsigned char button;


short* testSongMel[] = {testSong};
short* testSongMelNL[] = {testSongNoteLengths};
short* testSongMelRL[] = {testSongRestLengths};

short* testSong2Mel[] = {testSong2};
short* testSong2MelNL[] = {testSongNoteLengths2};
short* testSong2MelRL[] = {testSongRestLengths2};

short* testSong3Mel[] = {testSong3};
short* testSong3MelNL[] = {testSongNoteLengths3};
short* testSong3MelRL[] = {testSongRestLengths3};

//short* testSongHar[] = {testSongH};
//short* testSongHarNL[] = {testSongNoteLengthsH};
//short* testSongHarRL[] = {testSongRestLengthsH};

//short* testSongBas[] = {testSongB};
//short* testSongBasNL[] = {testSongNoteLengthsB};
//short* testSongBasRL[] = {testSongRestLengthsB};


short** playlistMel[] = {testSongMel, testSong2Mel, testSong3Mel};
short** playlistMelNL[] = {testSongMelNL, testSong2MelNL, testSong3MelNL};
short** playlistMelRL[] = {testSongMelRL, testSong2MelRL, testSong3MelRL};

//short** playlistHar[] = {testSongHar};
//short** playlistHarNL[] = {testSongHarNL};
//short** playlistHarRL[] = {testSongHarRL};

//short** playlistBas[] = {testSongBas};
//short** playlistBasNL[] = {testSongBasNL};
//short** playlistBasRL[] = {testSongBasRL};

char numRows[] = {12, 3, 5};

unsigned char prevSong;
unsigned char nextSong;
//these states below indicate that the song/mp3 player either paused or done playing music.
unsigned char paused = 1;
unsigned char songDone = 1;
unsigned long playList = sizeof(playlistMel) / sizeof(playlistMel[0]);

//PB6


/*enum MelodyStates{Minit, Mwait, Mplay, Ml, Mr, Mp};
int melodyTick(int state) {
  static unsigned short it1;
  static unsigned short it2;
  static unsigned short it3;
  static unsigned char it4 = 0;
  static unsigned char placeHolder;
  switch(state) {
    case Minit:
      state = Mwait;
      it1 = 0;
      it2 = 0;
      it3 = 0;
      it4 = 1;
      prevSong = 0;
      nextSong = 0;
      silence();
      break;
    case Mwait:
      if (!paused) {
        state = Mplay;
      }
      else {
        state = Mwait;
      }
      break;
    case Mplay:
      songDone = 0;
      if (paused) {
        silence();
        placeHolder = state;
        state = Mp;
        break;
      }
      if (prevSong && (it1 == 0)) {
        it1 = 0;
        it2 = 0;
        it3 = 0;
        if (it4 == 0) {
          it4 = playList - 1;
        }
        else {
          it4 = it4 - 1;
        }
        state = Mplay;
        break;
      }
      else if (prevSong) {
        it1 = 0;
        it2 = 0;
        it3 = 0;
        state = Mplay;
        break;
      }
      if (nextSong) {
        it1 = 0;
        it2 = 0;
        it3 = 0;
        it4 = it4 + 1;
        if (it4 == playList) {
          it4 = 0;
        }
        state = Mplay;
        break;
      }
      if (playlistMel[it4][it1][it2] == -1) {
        it1 = it1 + 1;
        it2 = 0;
      }
      if (it1 == numRows[it4]) {
        songDone = 1;
        state = Mwait;
        it1 = 0;
        it2 = 0;
        it3 = 0;
        it4 = it4 + 1;
        if (it4 == playList) {
          it4 = 0;
        }
        break;
      }
      play(playlistMel[it4][it1][it2]);
      state = Ml;
      break;
      case Ml:
        if (paused) {
          silence();
          placeHolder = state;
          state = Mp;
          break;
        }
        if (prevSong && (it1 == 0)) {
          it1 = 0;
          it2 = 0;
          it3 = 0;
          if (it4 == 0) {
            it4 = playList - 1;
          }
          else {
            it4 = it4 - 1;
          }
          state = Mplay;
          break;
        }
        else if (prevSong) {
          it1 = 0;
          it2 = 0;
          it3 = 0;
          state = Mplay;
          break;
        }
        if (nextSong) {
          it1 = 0;
          it2 = 0;
          it3 = 0;
          it4 = it4 + 1;
          if (it4 == playList) {
            it4 = 0;
          }
          state = Mplay;
          break;
        }
        if (it3 < playlistMelNL[it4][it1][it2]) {
          it3 = it3 + 1;
          state = Ml;
        }
        else {
          it3 = 0;
          silence();
          state = Mr;
        }
        break;
        case Mr:
          if (paused) {
            silence();
            placeHolder = state;
            state = Mp;
            break;
          }
          if (prevSong && (it1 == 0)) {
            it1 = 0;
            it2 = 0;
            it3 = 0;
            if (it4 == 0) {
              it4 = playList - 1;
            }
            else {
              it4 = it4 - 1;
            }
            state = Mplay;
            break;
          }
          else if (prevSong) {
            it1 = 0;
            it2 = 0;
            it3 = 0;
            state = Mplay;
            break;
          }
          if (nextSong) {
            it1 = 0;
            it2 = 0;
            it3 = 0;
            it4 = it4 + 1;
            if (it4 == playList) {
              it4 = 0;
            }
            state = Mplay;
            break;
          }
          if (it3 < playlistMelRL[it4][it1][it2]) {
            it3 = it3 + 1;
            state = Mr;
          }
          else {
            it3 = 0;
            it2 = it2 + 1;
            state = Mplay;
          }
          break;
          case Mp:
            if (prevSong && (it1 == 0)) {
              it1 = 0;
              it2 = 0;
              it3 = 0;
              if (it4 == 0) {
                it4 = playList - 1;
              }
              else {
                it4 = it4 - 1;
              }
              paused = 0;
              state = Mplay;
              break;
            }
            else if (prevSong) {
              it1 = 0;
              it2 = 0;
              it3 = 0;
              paused = 0;
              state = Mplay;
              break;
            }
            if (nextSong) {
              it1 = 0;
              it2 = 0;
              it3 = 0;
              it4 = it4 + 1;
              if (it4 == playList) {
                it4 = 0;
              }
              paused = 0;
              state = Mplay;
              break;
            }
            if (paused) {
              state = Mp;
            }
            else {
              if (placeHolder == Ml) {
                play(playlistMel[it4][it1][it2]);
              }
              state = placeHolder;
            }
            break;
  }
  return state;
}*/

enum States1 {init1, wait1, play1, length1, rest1, pause1};
int melodTick(int state) {
	static unsigned short i, j, k;
	static unsigned char l = 0;
	static unsigned char saveState;
	switch(state) {
		case init1:
		state= wait1;
		i = 0; j = 0; k = 0; l = 1;
		prevSong = 0;
		nextSong = 0;
		silence();
		break;

		case wait1:
		if (!paused) {
			state= play1;
			} else {
			state= wait1;
		}
		break;

		case play1:
		songDone = 0;
		if (paused) {
			silence();
			saveState = state;
			state = pause1;
			break;
		}
		if (prevSong && (i == 0)) {
			i = 0; j = 0; k = 0;
			if (l == 0) {
				l = playList - 1;
				}
			else {
				l--;
			}
			state = play1;
			break;
			}
			else if (prevSong){
			i = 0; j = 0; k = 0;
			state = play1;
			break;
		}
		if (nextSong) {
			i = 0; j = 0; k = 0;
			l++;
			if (l == playList) {
				l = 0;
			}
			state = play1;
			break;
		}
		if (playlistMel[l][i][j] == -1) {
			i++;
			j = 0;
		}
		if (i == numRows[l]) {
			songDone = 1;
			state = wait1;
			i = 0; j = 0; k = 0;
			l++;
			if (l == playList) {
				l = 0;
			}
			break;
		}
		play(playlistMel[l][i][j]);
		state = length1;
		break;

		case length1:
		if (paused) {
			silence();
			saveState = state;
			state = pause1;
			break;
		}
		if (prevSong && (i == 0)) {
			i = 0; j = 0; k = 0;
			if (l == 0) {
				l = playList - 1;
				} else {
				l--;
			}
			state = play1;
			break;
    } else if (prevSong){
			i = 0; j = 0; k = 0;
			state = play1;
			break;
		}
		if (nextSong) {
			i = 0; j = 0; k = 0;
			l++;
			if (l == playList) {
				l = 0;
			}
			state = play1;
			break;
		}
		if (k < playlistMelNL[l][i][j]) {
			k++;
			state = length1;
			} else {
			k = 0;
			silence();
			state = rest1;
		}
		break;

		case rest1:
		if (paused) {
			silence();
			saveState = state;
			state = pause1;
			break;
		}
		if (prevSong && (i == 0)) {
			i = 0; j = 0; k = 0;
			if (l == 0) {
				l = playList - 1;
				} else {
				l--;
			}
			state = play1;
			break;
    } else if (prevSong){
			i = 0; j = 0; k = 0;
			state = play1;
			break;
		}
		if (nextSong) {
			i = 0; j = 0; k = 0;
			l++;
			if (l == playList) {
				l = 0;
			}
			state = play1;
			break;
		}
		if (k < playlistMelRL[l][i][j]) {
			k++;
			state = rest1;
			} else {
			k = 0;
			j++;
			state = play1;
		}
		break;

		case pause1:
		if (prevSong && (i == 0)) {
			i = 0; j = 0; k = 0;
			if (l == 0) {
				l = playList - 1;
				} else {
				l--;
			}
			paused = 0;
			state = play1;
			break;
    } else if (prevSong){
			i = 0; j = 0; k = 0;
			pause = 0;
			state = play1;
			break;
		}
		if (nextSong) {
			i = 0; j = 0; k = 0;
			l++;
			if (l == playList) {
				l = 0;
			}
			paused = 0;
			state = play1;
			break;
		}
		if (paused) {
			state = pause1;
			} else {
			if (saveState == length1) {
				play(playListMel[l][i][j]);
			}
			state = saveState;
		}
		break;
	}
	return state;
}



enum Pauses{Pinit, Pp, Pr};
int pauseTick(int state) {
	unsigned char playPause = PINA & 0x01;
	switch(state) {
		case Pinit:
		paused = 1;
		state = Pp;
		break;
		case Pp:
		if (playPause) {
			state = Pr;
			paused = !paused;
		}
		else {
			state = Pp;
		}
		break;
		case Pr:
		if (playPause) {
			state = Pr;
		}
		else {
			state = Pp;
		}
		break;
		default:
		state = Pinit;
		break;
	}
	return state;
}

enum nextPrevStates{Pw, backSong, forSong};
int NextPrevTick(int state) {
	unsigned char NextPrevButton = 0;
	switch(state) {
		case Pw:
		if (NextPrevButton == (PINA & 0x04)) {
			prevSong = 1;
			state = backSong;
		}
		else if (NextPrevButton == (PINA & 0x02)) {
			nextSong = 1;
			state = forSong;
		}
		else {
			prevSong = 0;
			nextSong = 0;
			state = Pw;
		}
		break;
		case backSong:
		if (NextPrevButton == (PINA & 0x04)) {
			state = backSong;
		}
		else {
			state = Pw;
		}
		break;

		case forSong:
		if (NextPrevButton == (PINA & 0x02)) {
			state = forSong;
		}
		else {
			state = Pw;
		}
		break;
		default:
		state = Pw;
		break;
	}
	return state;
}




int main(void) {
    /* Insert DDR and PORT initializations */
	DDRA = 0x00;
	PORTA = 0x00;
	DDRB = 0x00;
	PORTB = 0x00;
	DDRC = 0xFF;
	PORTC = 0x00;
	DDRD = 0xF0;
	PORTD = 0x00;


	unsigned char timerPeriod = 1;
  //static task task1, task2, task3, task4, task5;
  //task *tasks = {&task1, &task2, &task3, &task4, &task5};
  static task task1, task2, task3;
  task *tasks[] = {&task1, &task2, &task3};
  const unsigned short taskNum = sizeof(tasks) / sizeof(*tasks);

  task1.state = 0;
  task1.period = 1;
  task1.elapsedTime = task1.period;
  task1.TickFct = &melodyTick;

  /*task2.state = 0;
  task2.period = 1;
  task2.elapsedTime = task1.period;
  task2.TickFct = &harmonyTick;

  task3.state = 0;
  task3.period = 1;
  task3.elapsedTime = task1.period;
  task3.TickFct = &bassTick;*/

  task2.state = 0;
  task2.period = 1;
  task2.elapsedTime = task2.period;
  task2.TickFct = &pauseTick;

  task3.state = 0;
  task3.period = 1;
  task3.elapsedTime = task1.period;
  task3.TickFct = &NextPrevTick;



	//unsigned char numVals;
	//unsigned char playButton;
	//unsigned short i;
	//unsigned short j;
	//char soundBuzzer = 0;
	//char soundBuzzerHarmony = 0;

    /* Insert your solution below */
	TimerSet(timerPeriod);
	TimerOn();

	PWM_on();
	//PWMH_on();
  //PWMB_on();

    while (1) {
		/*playButton = PINA & 0x01;
		//soundBuzzer = PINB & 0x40;
		//soundBuzzerHarmony = PINB & 0x08;
		if (playButton) {
			numVals = sizeof(testSong) / sizeof(int);
			for (i = 0; i < numVals; i++) {
			  play(testSong[i], soundBuzzer);
			  playH(testSongH[i], soundBuzzer);
			  rest(testSongNoteLengths[i]);
			  restH(testSongNoteLengthsH[i]);
			  silence(soundBuzzer);
			  silenceH(soundBuzzer);
			  rest(testSongRestLengths[i]);
			  restH(testSongRestLengthsH[i]);
        playB(testSongB[i], soundBuzzer);
        restB(testSongNoteLengthsB[i]);
        silenceB(soundBuzzer);
        restB(testSongRestLengthsB[i]);
			}
			numVals = sizeof(testSongH) / sizeof(int);
			for (i = 0; i < numVals; i++) {
				playH(testSongH[i], soundBuzzer);
				restH(testSongNoteLengthsH[i]);
				silenceH(soundBuzzer);
				restH(testSongRestLengthsH[i]);
			}
      numVals = sizeof(testSongB) / sizeof(int);
      for (i = 0; i < numVals; i++) {
        playB(testSongB[i], soundBuzzer);
        restB(testSongNoteLengthsB[i]);
        silenceB(soundBuzzer);
        restB(testSongRestLengthsB[i]);
      }
		}

		playButton = PINA & 0x01;
		while (playButton) {
			playButton = PINA & 0x01;
		}*/
		while(1) {
			for (unsigned char i = 0; i < taskNum; i++) {
				if ( tasks[i]->elapsedTime == tasks[i]->period) {
					tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
					tasks[i]->elapsedTime = 0;
				}
				tasks[i]->elapsedTime += timerPeriod;
			}
		}
		while(!TimerFlag){};
			TimerFlag = 0;
    }
    return 1;
}
