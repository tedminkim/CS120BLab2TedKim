/*	Author: Ted Kim
 *  Email: tkim094@ucr.edu
 *  Partner(s) Name: None
 *	Lab Section: 023 (Tuesdays & Thursdays 2-3:20 PM)
 *	Assignment: Custom Laboratory Project
 *	Exercise Description: iBreadBoard
 *
 *	I acknowledge all content contained herein, excluding template or example
 *	code, is my own original work.
 */
#include <avr/io.h>
#include <stdio.h>
#ifdef _SIMULATE_
#include "simAVRHeader.h"
#endif
#include <avr/interrupt.h>
 typedef struct _task {
	signed char state;
	unsigned long int period;
	unsigned long int elapsedTime;
	int (*TickFct) (int);
} task;
/*
 //NOKIA LCD 5110
 #define F_CPU 8000000UL
 #define LCD_RST_SET PORTD |= (1 << 0)
 #define LCD_RST_clr  PORTD &=~ (1<<0)

 #define LCD_DC_set   PORTD |=  (1<<1)
 #define LCD_DC_clr   PORTD &=~ (1<<1)

 #define SDIN_set     PORTD |=  (1<<2)
 #define SDIN_clr     PORTD &=~ (1<<2)

 #define SCLK_set     PORTD |=  (1<<3)
 #define SCLK_clr     PORTD &= ~(1<<3)
 const unsigned char font6x8[][6] =
{
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // sp
	{ 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
	{ 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
	{ 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
	{ 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $
	{ 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %
	{ 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
	{ 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
	{ 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
	{ 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
	{ 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
	{ 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
	{ 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 },   // ,
	{ 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -
	{ 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
	{ 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
	{ 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
	{ 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
	{ 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
	{ 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
	{ 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
	{ 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
	{ 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
	{ 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
	{ 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
	{ 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
	{ 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
	{ 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
	{ 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
	{ 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
	{ 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
	{ 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
	{ 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
	{ 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A
	{ 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
	{ 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
	{ 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
	{ 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
	{ 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
	{ 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
	{ 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
	{ 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
	{ 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
	{ 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
	{ 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
	{ 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
	{ 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
	{ 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
	{ 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
	{ 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
	{ 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
	{ 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
	{ 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
	{ 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
	{ 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
	{ 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
	{ 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
	{ 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
	{ 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
	{ 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [
	{ 0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55 },   // 55
	{ 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
	{ 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
	{ 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
	{ 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
	{ 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
	{ 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
	{ 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
	{ 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
	{ 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
	{ 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
	{ 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g
	{ 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
	{ 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
	{ 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j
	{ 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
	{ 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
	{ 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
	{ 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
	{ 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
	{ 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p
	{ 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q
	{ 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
	{ 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
	{ 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
	{ 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
	{ 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
	{ 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
	{ 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
	{ 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y
	{ 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
	{ 0x14, 0x14, 0x14, 0x14, 0x14, 0x14 }    // horiz lines
};

void LCD_write_byte(unsigned char dat, unsigned char command)
{
	unsigned char i;

	if (command == 1) {
		LCD_DC_clr;
	}

	else {
		LCD_DC_set;
	}

	for(i=0;i<8;i++)
	{
		if(dat&0x80)
		SDIN_set;
		else
		SDIN_clr;
		SCLK_clr;
		dat = dat << 1;
		SCLK_set;
	}
}

void LCD_wait()
{
	LCD_RST_clr;
	_delay_us(1);
	LCD_RST_set;

	_delay_us(1);

	LCD_write_byte(0x21, 1); // set LCD mode
	LCD_write_byte(0xc8, 1); // set bias voltage
	LCD_write_byte(0x06, 1); // temperature correction
	LCD_write_byte(0x13, 1); // 1:48
	LCD_write_byte(0x20, 1); // use bias command, vertical
	LCD_write_byte(0x0c, 1); // set LCD mode,display normally
	LCD_clear();             // clear the LCD
}

void LCD_clear()
{
	unsigned int i;

	LCD_write_byte(0x0c, 1);
	LCD_write_byte(0x80, 1);

	for (i=0; i<504; i++)
	{
		LCD_write_byte(0, 0);
	}
}

void LCD_set_XY(unsigned char X, unsigned char Y)
{
	LCD_write_byte(0x40 | Y, 1); // column
	LCD_write_byte(0x80 | X, 1);    // row
}

void LCD_write_char(unsigned char c)
{
	unsigned char line;

	c -= 32;

	for (line=0; line<6; line++) {
		LCD_write_byte(font6x8[c][line], 0);
	}
}

void LCD_write_english_string(unsigned char X,unsigned char Y,char *s)
{
	LCD_set_XY(X,Y);
	while (*s)
	{
		LCD_write_char(*s);
		s++;
	}
}
//END OF NOKI LCD 5110
*/

volatile unsigned char TimerFlag = 0;
unsigned long _avr_timer_M = 1;
unsigned long _avr_timer_cntcurr = 0;





void TimerOn() {
	TCCR2B = 0x0B;
	OCR2A = 125;
	TIMSK2 = 0x02;
	TCNT2 = 0;
	_avr_timer_cntcurr = _avr_timer_M;
	SREG |= 0x80;
}
void TimerOff() {
	TCCR2B = 0x00;
}
void TimerISR() {
	TimerFlag = 1;
}
ISR(TIMER2_COMPA_vect) {
	_avr_timer_cntcurr--;
	if (_avr_timer_cntcurr == 0) {
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
	_avr_timer_cntcurr = _avr_timer_M;
}

void set_PWM(double frequency) { //PB6
	static double current_frequency;
	if (frequency != current_frequency) {
		if (!frequency) { TCCR3B &= 0x08; }
		else { TCCR3B |= 0x03; }

		if (frequency < 0.954) { OCR3A = 0xFFFF; }
		else if (frequency > 31250) {OCR3A = 0x0000; }
		else {OCR3A = (short)(8000000 / (128 * frequency)) + 0; }

		TCNT3 = 0;
		current_frequency = frequency;
	}
}
void PWM_on() {
	TCCR3A = (1 << COM3A0);
	TCCR3B = (1 << WGM32) | (1 << CS31) | (1 << CS30);
	set_PWM(0);
}
void PWM_off() {
	TCCR3A = 0x00;
	TCCR3B = 0x00;
}





void set_PWMB(double frequency) { // PD5
	static double current_frequency;
	if (frequency != current_frequency) {
		if (!frequency) { TCCR1B &= 0x08; }
		else { TCCR1B |= 0x03; }

		if (frequency < 0.954) { OCR1A = 0xFFFF; }
		else if (frequency > 31250) {OCR1A = 0x0000; }
		else {OCR1A = (short)(8000000 / (128 * frequency)) + 0; }

		TCNT1 = 0;
		current_frequency = frequency;
	}
}
void PWMB_on() {
	TCCR1A = (1 << COM1A0);
	TCCR1B = (1 << WGM12) | (1 << CS11) | (1 << CS10);
	set_PWMB(0);
}
void PWMB_off() {
	TCCR1A = 0x00;
	TCCR1B = 0x00;
}

void set_PWMH(double frequency) { // PB3
	static double current_frequency;
	if (frequency != current_frequency) {
		if (!frequency) { TCCR0B &= 0x08; TCCR0A |= 0x03; }
		else { TCCR0B |= 0x05; }

		if (frequency < 31) { OCR0A = 0xFF; }
		else if (frequency > 3906) {OCR0A = 0x0000; }
		else {OCR0A = (short)(8000000 / (2* 1024 * frequency)) + 0.50; }

		TCNT0 = 0;
		current_frequency = frequency;
	}
}
void PWMH_on() {
	TCCR0A = (1 << COM0A0);
	TCCR0B = (1 << WGM02) | (1<< WGM01) | (1 << WGM00) | (1 << CS02) | (1 << CS00);
	set_PWMH(0);
}
void PWMH_off() {
	TCCR0A = 0x00;
	TCCR0B = 0x00;
}
/*
void play(double frequencyVal) {
	set_PWM(frequencyVal);
}
void silence() {
	set_PWM(0);
}
void playH(double frequencyVal) {
	set_PWMH(frequencyVal);
}
void silenceH() {
	set_PWMH(0);
}*/
void play(short freqSound) {
	//buzzerSound = 0; //dud
	set_PWM(freqSound);
}
//void rest(short arrayVal) {
	//for (short i = 0; i < arrayVal; i++) {
		//while(!TimerFlag) {}
		//TimerFlag = 0;
	//}
//}
void silence() {
	//buzzerSound = 0; //dud
	set_PWM(0);
}
void playH(short freqSound) {
	//buzzerSound = 0; //dud
	set_PWMH(freqSound);
}
//void restH(short arrayVal) {
//	for (short i = 0; i < arrayVal; i++) {
		//while(!TimerFlag) {}
		//TimerFlag = 0;
//	}
//}
void silenceH() {
	//buzzerSound = 0; //dud
	set_PWMH(0);
}
void playB(short freqSound) {
  //buzzerSound = 0;
  set_PWMB(freqSound);
}
//void restB(short arrayVal) {
  //for (short i = 0; i < arrayVal; i++) {
    //while(!TimerFlag) {}
    //TimerFlag = 0;
  //}
//}
void silenceB() {
  //buzzerSound = 0;
  set_PWMB(0);
}

//MUSIC NOTES
//#if 1
/*#define C 130.8 * 2
#define CS 138.6 * 2 //also known as D FLAT
#define D 146.8 * 2
#define DS 155.6 * 2 //ALSO KNOWN AS E FLAT
#define E 164.8 * 2
#define F 174.6 * 2
#define FS  185 * 2//ALSO KNOWN AS G FLAT
#define G 196 * 2
#define GS 207.7 * 2//ALSO KNOWN AS A FLAT
#define A 220 * 2
#define AS 233.1 * 2//ALSO KNOWN AS B FLAT
#define B 246.9 * 2
#define Cb B
#define Fb E
#define Cs Db
#define Ds Eb
#define Fs Gb
#define Gs Ab
#define As Bb*/
//#endif
#define C 130.8*2
#define Db 138.6*2
#define D 146.8*2
#define Eb 155.6*2
#define E 164.8*2
#define F 174.6*2
#define Gb 185*2
#define G 196*2
#define Ab 207.7*2
#define A 220*2
#define Bb 233.1*2
#define B 246.9*2
#define Cb B
#define Fb E
#define Cs Db
#define Ds Eb
#define Fs Gb
#define Gs Ab
#define As Bb

unsigned char GetBit(unsigned char port, unsigned char number) {
	return (port & (0x01 << number));
}
//END OF MUSIC NOTES

//REST LENGTHS

//#define QUARTER 75/2
//#define HALF 75
//#define THREEFOURTHS 150
//#define WHOLE 400

//END OF REST LENGTHS

//NOTE LENGTHS
//test song mary had a little lamb
short testSong[] = {C, C, C, C, C, C, C, C, C, C, C, C, C, C, C, C, C, C, C, C, C, C, C, C, C, C};
short testSongNoteLengths[] = {300, 300, 300, 300, 300, 300, 600, 300, 300, 600, 300, 300, 600, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 1000};
short testSongRestLengths[] = {25, 25, 25, 25, 50, 50, 150, 50, 50, 150, 50, 50, 150, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 150};

short testSong2[] = {G, F, E, F, G, G, G, F, F, F, G, C*2, C*2, G, F, E, F, G, G, G, G, F, F, G, F, E};
//short testSongH[] = {F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F};
short testSongNoteLengths2[] = {300, 300, 300, 300, 300, 300, 600, 300, 300, 600, 300, 300, 600, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 1000};
short testSongRestLengths2[] = {25, 25, 25, 25, 50, 50, 150, 50, 50, 150, 50, 50, 150, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 150};

short testSong3[] = {C/2, B/2, A/2, B/2, C/2, C/2, C/2, B/2, B/2, B/2, C/2, E, E, C/2, B/2, A/2, B/2, C/2, C/2, C/2, C/2, B/2, B/2, C/2, A/2, G/2};
//short testSongH[] = {F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F};
short testSongNoteLengths3[] = {300, 300, 300, 300, 300, 300, 600, 300, 300, 600, 300, 300, 600, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 1000};
short testSongRestLengths3[] = {25, 25, 25, 25, 50, 50, 150, 50, 50, 150, 50, 50, 150, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 150};
//harmony done
//melody done

//test song mary had a little lamb
//COMMENTED FOR KNOWN
/*
short testSongH[] = {G, F, E, F, G, G, G, F, F, F, G, C*2, C*2, G, F, E, F, G, G, G, G, F, F, G, F, E};
//short testSongH[] = {F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F};
short testSongNoteLengthsH[] = {300, 300, 300, 300, 300, 300, 600, 300, 300, 600, 300, 300, 600, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 1000};
short testSongRestLengthsH[] = {25, 25, 25, 25, 50, 50, 150, 50, 50, 150, 50, 50, 150, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 150};

short testSongB[] = {C/2, B/2, A/2, B/2, C/2, C/2, C/2, B/2, B/2, B/2, C/2, E, E, C/2, B/2, A/2, B/2, C/2, C/2, C/2, C/2, B/2, B/2, C/2, A/2, G/2};
//short testSongH[] = {F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F};
short testSongNoteLengthsB[] = {300, 300, 300, 300, 300, 300, 600, 300, 300, 600, 300, 300, 600, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 1000};
short testSongRestLengthsB[] = {25, 25, 25, 25, 50, 50, 150, 50, 50, 150, 50, 50, 150, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 150};
//harmony done


*/


//unsigned char SetBit(unsigned char pin, unsigned char number, unsigned char bin_value)
//{
	//return (bin_value ? pin | (0x01 << number) : pin & ~(0x01 << number));/
//}

////////////////////////////////////////////////////////////////////////////////
//Functionality - Gets bit from a PINx
//Parameter: Takes in a uChar for a PINx and the pin number
//Returns: The value of the PINx
/*unsigned char GetBit(unsigned char port, unsigned char number)
{
	return ( port & (0x01 << number) );
}*/
//unsigned char button;


/*short* testSongMel[] = {testSong};
short* testSongMelNL[] = {testSongNoteLengths};
short* testSongMelRL[] = {testSongRestLengths};

short* testSong2Mel[] = {testSong2};
short* testSong2MelNL[] = {testSongNoteLengths2};
short* testSong2MelRL[] = {testSongRestLengths2};

short* testSong3Mel[] = {testSong3};
short* testSong3MelNL[] = {testSongNoteLengths3};
short* testSong3MelRL[] = {testSongRestLengths3};

//short* testSongHar[] = {testSongH};
//short* testSongHarNL[] = {testSongNoteLengthsH};
//short* testSongHarRL[] = {testSongRestLengthsH};

//short* testSongBas[] = {testSongB};
//short* testSongBasNL[] = {testSongNoteLengthsB};
//short* testSongBasRL[] = {testSongRestLengthsB};


short** playlistMel[] = {testSongMel};
short** playlistMelNL[] = {testSongMelNL};
short** playlistMelRL[] = {testSongMelRL};

short** playlistHar[] = {testSong2Mel};
short** playlistHarNL[] = {testSong2MelNL};
short** playlistHarRL[] = {testSong2MelRL};

short** playlistBas[] = {testSong3Mel};
short** playlistBasNL[] = {testSong3MelNL};
short** playlistBasRL[] = {testSong3MelRL};

//short** playlistHar[] = {testSongHar};
//short** playlistHarNL[] = {testSongHarNL};
//short** playlistHarRL[] = {testSongHarRL};

//short** playlistBas[] = {testSongBas};
//short** playlistBasNL[] = {testSongBasNL};
//short** playlistBasRL[] = {testSongBasRL};*/

short MegMm1[]  = {D, D, D*2, A, Gs, G, F, D, F, G,                         C, C, D*2, A, Gs, G, F, D, F, G,                             B/2, B/2, D*2, A, Gs, G, F, D, F, G,                      Bb/2, Bb/2, D*2, A, Gs, G, F, D, F, G, -1};
short MegMm1_L[] = {100, 100, 100, 100, 100, 100, 200, 100, 100, 100,       100, 100, 100, 100, 100, 100, 200, 100, 100, 100,            100, 100, 100, 100, 100, 100, 200, 100, 100, 100,         100, 100, 100, 100, 100, 100, 200, 100, 100, 100};
short MegMm1_R[] = {25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25,   25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25,        25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25,     25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25};

short MegMm5[]  = {D, D, D*2, A, Gs, G, F, D, F, G,                         C, C, D*2, A, Gs, G, F, D, F, G,                             B/2, B/2, D*2, A, Gs, G, F, D, F, G,                      Bb/2, Bb/2, D*2, A, Gs, G, F, D, F, G, -1};
short MegMm5_L[] = {100, 100, 100, 100, 100, 100, 200, 100, 100, 100,       100, 100, 100, 100, 100, 100, 200, 100, 100, 100,            100, 100, 100, 100, 100, 100, 200, 100, 100, 100,         100, 100, 100, 100, 100, 100, 200, 100, 100, 100};
short MegMm5_R[] = {25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25,   25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25,        25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25,     25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25};

short MegMm9[]  = {D*2, D*2, D*4, A*2, Gs*2, G*2, F*2, D*2, F*2, G*2,       C*2, C*2, D*4, A*2, Gs*2, G*2, F*2, D*2, F*2, G*2,           B, B, D*4, A*2, Gs*2, G*2, F*2, D*2, F*2, G*2,            Bb, Bb, D*4, A*2, Gs*2, G*2, F*2, D*2, F*2, G*2, -1};
short MegMm9_L[] = {100, 100, 100, 100, 100, 100, 200, 100, 100, 100,       100, 100, 100, 100, 100, 100, 200, 100, 100, 100,            100, 100, 100, 100, 100, 100, 200, 100, 100, 100,         100, 100, 100, 100, 100, 100, 200, 100, 100, 100};
short MegMm9_R[] = {25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25,   25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25,        25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25,     25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25};

short MegMm13[]  = {D*2, D*2, D*4, A*2, Gs*2, G*2, F*2, D*2, F*2, G*2,       C*2, C*2, D*4, A*2, Gs*2, G*2, F*2, D*2, F*2, G*2,           B, B, D*4, A*2, Gs*2, G*2, F*2, D*2, F*2, G*2,            Bb, Bb, D*4, A*2, Gs*2, G*2, F*2, D*2, C*2, D*2, E*2, -1};
short MegMm13_L[] = {100, 100, 100, 100, 100, 100, 200, 100, 100, 100,       100, 100, 100, 100, 100, 100, 200, 100, 100, 100,            100, 100, 100, 100, 100, 100, 200, 100, 100, 100,         100, 100, 100, 100, 100, 100, 200, 100, 100, 40, 35};
short MegMm13_R[] = {25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25,   25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25,        25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25,     25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 12, 13};

short MegMm17[]   = {E*2, F*2, F*2, F*2, F*2, E*2, F*2, D*2, D*2,        F*2, F*2, F*2, G*2, Ab*2, G*2, Ab*2, G*2, D*2, F*2, G*2,   F*2, F*2, F*2, G*2, Ab*2, A*2, C*4, A*2,              D*4, D*4, D*4, A*2, D*4, C*4, -1};
short MegMm17_L[] = {22, 200, 100, 100, 100, 22, 200, 100, 125+500-50,   200, 100, 100, 100, 200, 50, 50, 50, 100, 100, 100,        200, 100, 50, 100, 100, 100, 100, 125+250-50,         200, 200, 100, 100, 100, 125+500*2-50};
short MegMm17_R[] = {3, 50, 25, 25+125, 25+125-25, 3, 50, 25+125, 50,    50, 25, 25+125, 25+125, 50, 12, 13, 75, 25, 25, 25+250,    50, 25, 75+125, 25+125, 25+125, 25+125, 25+125, 50,   50, 50, 25, 25, 25, 50};

short MegMm21[]   = {A*2, A*2, A*2, A*2, Gs*2, A*2, G*2, G*2,        A*2, A*2, A*2, A*2, G*2, A*2, D*4, A*2, G*2,     D*4, A*2, G*2, F*2, C*4, G*2, F*2, E*2,    B, D*2, E*2, F*2, C*4, -1};
short MegMm21_L[] = {200, 100, 100, 100, 22, 200, 100, 125+500-50,   200, 200, 100, 50, 50, 50, 200, 100, 200,        200, 200, 200, 200, 200, 200, 200, 200,    200, 100, 100, 100, 125+2*500-50};
short MegMm21_R[] = {50, 25, 25+125, 25+125-25, 3, 50, 25+125, 50,   50, 50, 25, 75+125, 75+125, 75+125, 50, 25, 50,  50, 50, 50, 50, 50, 50, 50, 50,            50, 25, 150, 150, 50};

short MegMm25[]   = {0, F*2, D*2, F*2, G*2, Ab*2, G*2, F*2, D*2,    Ab*2, G*2, D*2, F*2, G*2, Gs*2, A*2,        C*4, A*2, Gs*2, G*2, F*2, D*2, E*2, F*2, G*2, A*2, C*4,    Db*4, Ab*2, Ab*2, G*2, F*2, G*2,         D*2, E*2, F*2, F*4, E*4, D*4,    E*4, F*4, G*4, E*4,   A*4, A*4, Gs*4, G*4, Fs*4, F*4, E*4, Ds*4, D*4,      Cs*4, Eb*4, -1};
short MegMm25_L[] = {0, 100, 100, 100, 100, 100, 100, 100, 100,     50, 50, 100, 200, 2*500+125-50, 200, 100,   100, 100, 100, 100, 100, 100, 100, 200, 200, 200, 200,     200, 100, 100, 100, 100, 125+2*500-50,   200, 200, 200, 200, 450, 450,    450, 450, 450, 450,   2*500-50, 100, 100, 100, 100, 100, 100, 100, 100,    2*500, 2*500-50};
short MegMm25_R[] = {2*500+100, 25, 25, 25, 25, 25, 25, 25, 25,     12, 13, 25, 50, 50, 50, 25,                 25+125, 25, 25, 25, 25, 25, 25, 50, 50, 50, 50,            50, 25+125, 25, 25, 25, 50,              50, 50, 50, 50, 50, 50,          50, 50, 50, 50,       50, 25, 25, 25, 25, 25, 25, 25, 25,                  0, 50};

short MegMm33[]   = {Bb/2, F,      E, D,               F,            0,           Bb/2, F,      E, D,               D, D/2, -1};
short MegMm33_L[] = {3*500, 450,   2*500, 2*500-50,    4*500-50,     0,           3*500, 450,   2*500, 2*500-50,    7*500, 450};
short MegMm33_R[] = {0, 50,        0, 50,              50,           4*500+125,   0, 50,        0, 50,              0, 50};

short MegMm41[]   = {Bb/2, F,       E, D,              F,          G*2, D*4, F*4, D*4, G*4, F*4, D*4, C*4, A*2, G*2, A*2, C*4,     Bb/2, F,       E, D,               D, F*2, E*2, C*2, E*2, D*2, G, A, C*2,                  F*2, E*2, C*2, E*2, D*2, G, A, C*2, -1};
short MegMm41_L[] = {3*500, 450,    2*500, 2*500-50,   4*500-50,   100, 100, 100, 100, 100, 100, 100, 100, 200, 100, 100, 100,     3*500, 450,    2*500, 2*500-50,    200, 100, 100, 100, 100, 200, 100, 100, 100,            100, 100, 100, 100, 200, 100, 100, 100};
short MegMm41_R[] = {0, 50,         0, 50,             50,         25, 25, 25, 25, 150, 150, 25, 25+125, 50, 25, 25, 25,           0, 50,         0, 50,              50, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25+250,   150, 150+125, 25+125, 25+125, 50, 25, 25, 25};

short MegMm49[]   = {0, -1};
short MegMm49_L[] = {0};
short MegMm49_R[] = {4*500*14+250+250};

short MegMm63[]   = {D, D, D*2, A, Gs, G, F, D, F, G,                         D, D, D*2, A, Gs, G, F, D, F, G,                            Bb/2, Bb/2, D*2, A, Gs, G, F, D, F, G,                    C, C, D*2, A, Gs, G, F, D, F, G,                           D, D, D*2, A, Gs, G, F, D, F, G,                         D, D, D*2, A, Gs, G, F, D, F, G,                            Bb/2, Bb/2, D*2, A, Gs, G, F, D, F, G,                    C, C, D*2, A, Gs, G, F, D, F, G, -1};
short MegMm63_L[] = {100, 100, 100, 100, 100, 100, 200, 100, 100, 100,       100, 100, 100, 100, 100, 100, 200, 100, 100, 100,            100, 100, 100, 100, 100, 100, 200, 100, 100, 100,         100, 100, 100, 100, 100, 100, 200, 100, 100, 100,          100, 100, 100, 100, 100, 100, 200, 100, 100, 100,       100, 100, 100, 100, 100, 100, 200, 100, 100, 100,            100, 100, 100, 100, 100, 100, 200, 100, 100, 100,         100, 100, 100, 100, 100, 100, 200, 100, 100, 100};
short MegMm63_R[] = {25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25,   25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25,        25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25,     25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25,      25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25,   25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25,        25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25,     25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25+1000};



short MegHm1[]   = {0, -1};
short MegHm1_L[] = {0};
short MegHm1_R[] = {4*500*4+250};

short MegHm5[]   = {D,                    C,                B/2,             Bb/2,          C, -1};
short MegHm5_L[] = {125+250+500*2+100,    250+500*3-50,     250+500*3-50,    250+250+100,   125+500*2-50};
short MegHm5_R[] = {25+3*125+250,         50+250,           50+250,          25,            50+100};

short MegHm9[]   = {D, D, D*2, A, Gs, G, F, D, F, G,                         C, C, D*2, A, Gs, G, F, D, F, G,                             B/2, B/2, D*2, A, Gs, G, F, D, F, G,                      Bb/2, Bb/2, D*2, A, Gs, G, F, D, F, G, -1};
short MegHm9_L[] = {100, 100, 100, 100, 100, 100, 200, 100, 100, 100,       100, 100, 100, 100, 100, 100, 200, 100, 100, 100,            100, 100, 100, 100, 100, 100, 200, 100, 100, 100,         100, 100, 100, 100, 100, 100, 200, 100, 100, 100};
short MegHm9_R[] = {25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25,   25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25,        25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25,     25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25};

short MegHm13[]   = {D, D, D*2, A, Gs, G, F, D, F, G,                         C, C, D*2, A, Gs, G, F, D, F, G,                             B/2, B/2, D*2, A, Gs, G, F, D, F, G,                      Bb/2, Bb/2, D*2, A, Gs, G, F, D, -1};
short MegHm13_L[] = {100, 100, 100, 100, 100, 100, 200, 100, 100, 100,       100, 100, 100, 100, 100, 100, 200, 100, 100, 100,            100, 100, 100, 100, 100, 100, 200, 100, 100, 100,         100, 100, 100, 100, 100, 100, 200, 100};
short MegHm13_R[] = {25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25,   25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25,        25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25,     25, 25, 150, 150+125, 25+125, 25+125, 50, 25+250};

short MegHm17[]   = {0, G*4, -1};
short MegHm17_L[] = {0, 125+500-50};
short MegHm17_R[] = {4*500*4-125-500, 50+125};

short MegHm21[]   = {F*2, F*2, F*2, F*2, E*2, F*2, D*2, D*2,         F*2, F*2, F*2, F*2, D*2, F*2, E*2, D*2, C*2,     F*2, A*2, G*2, F*2, E*2, G*2, F*2, E*2,    G, Bb, C*2, D*2, E*2, -1};
short MegHm21_L[] = {200, 100, 100, 100, 22, 200, 100, 125+500-50,   200, 200, 100, 50, 50, 50, 200, 100, 200,        200, 200, 200, 200, 200, 200, 200, 200,    200, 100, 100, 100, 125+2*500-50};
short MegHm21_R[] = {50, 25, 25+125, 25+125-25, 3, 50, 25+125, 50,   50, 50, 25, 75+125, 75+125, 75+125, 50, 25, 50,  50, 50, 50, 50, 50, 50, 50, 50,            50, 25, 150, 150, 50};

short MegHm25[]   = {0, D*2, B, D*2, D*2, D*2, D*2, D*2, B,         F*2, E*2, D*2, D*2, E*2, Gs*2, A*2,         C*4, A*2, Gs*2, G*2, F*2, D*2, E*2, F*2, G*2, A*2, C*4,    Db*4, Ab*2, Ab*2, G*2, F*2, G*2,         F, G, A, A*2, G*2, F*2,          G*2, A*2, C*4, A*2,   D*4, A*4, Gs*4, G*4, Fs*4, F*4, E*4, Ds*4, D*4,      Gs*2, B*2, -1};
short MegHm25_L[] = {0, 100, 100, 100, 100, 100, 100, 100, 100,     50, 50, 100, 200, 2*500+125-50, 200, 100,   100, 100, 100, 100, 100, 100, 100, 200, 200, 200, 200,     200, 100, 100, 100, 100, 125+2*500-50,   200, 200, 200, 200, 450, 450,    450, 450, 450, 450,   2*500-50, 100, 100, 100, 100, 100, 100, 100, 100,    2*500, 2*500-50};
short MegHm25_R[] = {2*500+100, 25, 25, 25, 25, 25, 25, 25, 25,     12, 13, 25, 50, 50, 50, 25,                 25+125, 25, 25, 25, 25, 25, 25, 50, 50, 50, 50,            50, 25+125, 25, 25, 25, 50,              50, 50, 50, 50, 50, 50,          50, 50, 50, 50,       50, 25, 25, 25, 25, 25, 25, 25, 25,                  0, 50};

short MegHm33[]   = {Bb/4, Bb/4, Bb/4, Bb/4, Bb/4, Bb/4, Bb/4, Bb/4, Bb/4, Bb/4,   C/2, C/2, C/2, C/2, C/2, C/2, C/2, C/2, C/2, C/2,       B/4, B/4, B/4, B/4, B/4, B/4, B/4, B/4, B/4, B/4,	     B/4, B/4, B/4, B/4, B/4, B/4, B/4, B/4, B/4, B/4,	               Bb/4, Bb/4, Bb/4, Bb/4, Bb/4, Bb/4, Bb/4, Bb/4, Bb/4, Bb/4,   C/2, C/2, C/2, C/2, C/2, C/2, C/2, C/2, C/2, C/2,       D/2, D/2, D/2, D/2, D/2, D/2, D/2, D/2, D/2, D/2,	      D/2, D/2, D/2, D/2, D/2, D/2, D/2, D/2, D/2, D/2, -1};
short MegHm33_L[] = {100, 100, 100, 100, 100, 100, 100, 100, 100, 200,             100, 100, 100, 100, 100, 100, 100, 100, 100, 200,       100, 100, 100, 100, 100, 100, 100, 100, 100, 200,        100, 100, 100, 100, 100, 100, 100, 100, 100, 200,                 100, 100, 100, 100, 100, 100, 100, 100, 100, 200,             100, 100, 100, 100, 100, 100, 100, 100, 100, 200,       100, 100, 100, 100, 100, 100, 100, 100, 100, 200,        100, 100, 100, 100, 100, 100, 100, 100, 100, 200};
short MegHm33_R[] = {150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,         150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,   150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,    150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,             150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,         150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,   150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,    150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50};

short MegHm41[]   = {D/2, D, A/2, Ab/2, G/2, F/2, D/2, F/2, G/2,        C/2, C/2, D, A/2, Ab/2, G/2, F/2, D/2, F/2, G/2,             B/4, B/4, D, A/2, Ab/2, G/2, F/2, D/2, F/2, G/2,          B/4, B/4, D, A/2, Ab/2, G/2, F/2, D/2, F/2, G/2,               D/2, D, A/2, Ab/2, G/2, F/2, D/2, F/2, G/2,        C/2, C/2, D, A/2, Ab/2, G/2, F/2, D/2, F/2, G/2,        D, F, E, C, E, D, G, A, C*2,                            F, E, C, E, D, G, A, C*2, -1};
short MegHm41_L[] = {100, 100, 100, 100, 100, 200, 100, 100, 100,       100, 100, 100, 100, 100, 100, 200, 100, 100, 100,            100, 100, 100, 100, 100, 100, 200, 100, 100, 100,         100, 100, 100, 100, 100, 100, 200, 100, 100, 100,              100, 100, 100, 100, 100, 200, 100, 100, 100,       100, 100, 100, 100, 100, 100, 200, 100, 100, 50,       200, 100, 100, 100, 100, 200, 100, 100, 100,            100, 100, 100, 100, 200, 100, 100, 100};
short MegHm41_R[] = {25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25,  25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25,        25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25,     25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25+125,      25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25,  25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 0,   50, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25+250,   150, 150+125, 25+125, 25+125, 50, 25, 25, 25+50};

short MegHm49[]   = {Bb/4, Bb/4, Bb/4, Bb/4, Bb/4, Bb/4, Bb/4, Bb/4, Bb/4, Bb/4,   C/2, C/2, C/2, C/2, C/2, C/2, C/2, C/2, C/2, C/2,       D/2, D/2, D/2, D/2, Cs/2, Cs/2, Cs/2, Cs/2, Cs/2, Cs/2,	     C/2, C/2, C/2, C/2, B/4, B/4, B/4, B/4, B/4, B/4,      Bb/4, Bb/4, Bb/4, Bb/4, Bb/4, Bb/4, Bb/4, Bb/4, Bb/4, Bb/4,   C/2, C/2, C/2, C/2, C/2, C/2, C/2, C/2, C/2, C/2,       D/2, D/2, D/2, D/2, D/2, D/2, D/2, D/2, D/2, D/2,	     D/2, D/2, D/2, D/2, D/2, D/2, D/2, D/2, D/2, D/2,      Bb/4, Bb/4, Bb/4, Bb/4, Bb/4, Bb/4, Bb/4, Bb/4, Bb/4, Bb/4,   C/2, C/2, C/2, C/2, C/2, C/2, C/2, C/2, C/2, C/2,       D/2, D/2, D/2, D/2, Cs/2, Cs/2, Cs/2, Cs/2, Cs/2, Cs/2,	     C/2, C/2, C/2, C/2, B/4, B/4, B/4, B/4, B/4, B/4,       Bb/4, Bb/4, Bb/4, Bb/4, Bb/4, Bb/4, Bb/4, Bb/4, Bb/4, Bb/4,   C/2, C/2, C/2, C/2, C/2, C/2, C/2, C/2, C/2, C/2, -1};
short MegHm49_L[] = {};
short MegHm49_R[] = {150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,         150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,   150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,        150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,  150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,         150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,   150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,  150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,  150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,         150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,   150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,          150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,   150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,         150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50};

short MegHm63[]   = {D/2, D/2, D/2, D/2, D/2, D/2, D/2, D/2, D/2, D/2,	     D/2, D/2, D/2, D/2, D/2, D/2, D/2, D/2, D/2, D/2,         0, -1};
short MegHm63_L[] = {100, 100, 100, 100, 100, 100, 100, 100, 100, 200,      100, 100, 100, 100, 100, 100, 100, 100, 100, 200,         0};
short MegHm63_R[] = {150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,  150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,     4*500*6};

short MegBm1[]   = {0, A, -1};
short MegBm1_L[] = {0, 0};
short MegBm1_R[] = {4*500*4, 125};

short MegBm5[]   = {D/2, D/2, D/2, D/2, D/2, D/2, D/2, D/2, D/2, D/2,        C/2, C/2, C/2, C/2, C/2, C/2, C/2, C/2, C/2, C/2,       B/4, B/4, B/4, B/4, B/4, B/4, B/4, B/4, B/4, B/4,        Bb/4, Bb/4, Bb/4, Bb/4, C/2, C/2, C/2, C/2, C/2, C/2, -1};
short MegBm5_L[] = {100, 100, 100, 100, 100, 100, 100, 100, 100, 200,        100, 100, 100, 100, 100, 100, 100, 100, 100, 200,       100, 100, 100, 100, 100, 100, 100, 100, 100, 200,        100, 100, 100, 100, 100, 100, 100, 100, 100, 200};
short MegBm5_R[] = {150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,    150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,   150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,    150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50};

short MegBm9[]   = {D/4, D/4, D/4, D/4, D/4, D/4, D/4, D/4, D/4, D/4,        C/4, C/4, C/4, C/4, C/4, C/4, C/4, C/4, C/4, C/4,       B/8, B/8, B/8, B/8, B/8, B/8, B/8, B/8, B/8, B/8,        Bb/8, Bb/8, Bb/8, Bb/8, C/4, C/4, C/4, C/4, C/4, C/4, -1};
short MegBm9_L[] = {100, 100, 100, 100, 100, 100, 100, 100, 100, 200,        100, 100, 100, 100, 100, 100, 100, 100, 100, 200,       100, 100, 100, 100, 100, 100, 100, 100, 100, 200,        100, 100, 100, 100, 100, 100, 100, 100, 100, 200};
short MegBm9_R[] = {150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,    150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,   150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,    150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50};

short MegBm13[]   = {D/4, D/4, D/4, D/4, D/4, D/4, D/4, D/4, D/4, D/4,        C/4, C/4, C/4, C/4, C/4, C/4, C/4, C/4, C/4, C/4,       B/8, B/8, B/8, B/8, B/8, B/8, B/8, B/8, B/8, B/8,        Bb/8, Bb/8, Bb/8, Bb/8, C/4, C/4, C/4, C/4, C/4, C/4, -1};
short MegBm13_L[] = {100, 100, 100, 100, 100, 100, 100, 100, 100, 200,        100, 100, 100, 100, 100, 100, 100, 100, 100, 200,       100, 100, 100, 100, 100, 100, 100, 100, 100, 200,        100, 100, 100, 100, 100, 100, 100, 100, 100, 200};
short MegBm13_R[] = {150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,    150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,   150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,    150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50};

short MegBm17[]   = {D/2, D/2, D/2, D/2, D/2, D/2, D/2, D/2, D/2, D/2,        C/2, C/2, C/2, C/2, C/2, C/2, C/2, C/2, C/2, C, C/2,       B/4, B/4, B/4, B/4, B/4, B/4, B/4, B/4, B/4, B/4,        Bb/4, Bb/4, Bb/4, Bb/4, C/2, C/2, C/2, C/2, C/2, C, C/2, -1};
short MegBm17_L[] = {100, 100, 100, 100, 100, 100, 100, 100, 100, 200,        100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,     100, 100, 100, 100, 100, 100, 100, 100, 100, 200,        100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100};
short MegBm17_R[] = {150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,    150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 25, 25,  150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,    150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 25, 25};

short MegBm21[]   = {D/2, D/2, D, A/2, Ab/2, G/2, F/2, D/2, F/2, G/2,        C/2, C/2, D, A/2, Ab/2, G/2, F/2, D/2, F/2, G/2,             B/4, B/4, D, A/2, Ab/2, G/2, F/2, D/2, F/2, G/2,          Bb/4, Bb/4, D, A/2, G/2, F/2, D/2, F/2, G/2, -1};
short MegBm21_L[] = {100, 100, 100, 100, 100, 100, 200, 100, 100, 100,       100, 100, 100, 100, 100, 100, 200, 100, 100, 100,            100, 100, 100, 100, 100, 100, 200, 100, 100, 100,         100, 100, 100, 100, 100, 200, 100, 100, 100};
short MegBm21_R[] = {25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25,   25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25,        25, 25, 150, 150+125, 25+125, 25+125, 50, 25, 25, 25,     25, 25, 150, 150+250+125, 25+125, 50, 25, 25, 25};

short MegBm25[]   = {Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/4,   C/4, C/4, C/4, C/4, C/4, C/4, C/4, C/4, C/4, C/2,       D/4, D/4, D/4, D/4, D/4, D/4, D/4, D/4, D/4, D/2,	     Cs/4, Cs/4, Cs/4, Cs/4, Cs/4, Cs/4, Cs/4, Cs/4, Cs/4, Cs/2,       Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/4,   C/4, C/4, C/4, C/4, C/4, C/4, C/4, C/4, C/4, C/2,       D/4, D/4, D/4, D/4, D/4, D/4, D/4, D/4, D/4, D/2,	      Cs/4, Cs/4, Cs/4, Cs/4, Cs/4, Cs/4, Cs/4, Cs/4, Cs/4, Cs/2, -1};
short MegBm25_L[] = {100, 100, 100, 100, 100, 100, 100, 100, 100, 200,             100, 100, 100, 100, 100, 100, 100, 100, 100, 200,       100, 100, 100, 100, 100, 100, 100, 100, 100, 200,        100, 100, 100, 100, 100, 100, 100, 100, 100, 200,                 100, 100, 100, 100, 100, 100, 100, 100, 100, 200,             100, 100, 100, 100, 100, 100, 100, 100, 100, 200,       100, 100, 100, 100, 100, 100, 100, 100, 100, 200,        100, 100, 100, 100, 100, 100, 100, 100, 100, 200};
short MegBm25_R[] = {150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,         150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,   150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,    150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,             150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,         150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,   150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,    150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50};

short MegBm33[]   = {Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8,   C/4, C/4, C/4, C/4, C/4, C/4, C/4, C/4, C/4, C/4,       B/8, B/8, B/8, B/8, B/8, B/8, B/8, B/8, B/8, B/8,	     B/8, B/8, B/8, B/8, B/8, B/8, B/8, B/8, B/8, B/8,                 Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8,   C/4, C/4, C/4, C/4, C/4, C/4, C/4, C/4, C/4, C/4,       D/4, D/4, D/4, D/4, D/4, D/4, D/4, D/4, D/4, D/4,	      D/4, D/4, D/4, D/4, D/4, D/4, D/4, D/4, D/4, D/4, -1};
short MegBm33_L[] = {100, 100, 100, 100, 100, 100, 100, 100, 100, 200,             100, 100, 100, 100, 100, 100, 100, 100, 100, 200,       100, 100, 100, 100, 100, 100, 100, 100, 100, 200,        100, 100, 100, 100, 100, 100, 100, 100, 100, 200,                 100, 100, 100, 100, 100, 100, 100, 100, 100, 200,             100, 100, 100, 100, 100, 100, 100, 100, 100, 200,       100, 100, 100, 100, 100, 100, 100, 100, 100, 200,        100, 100, 100, 100, 100, 100, 100, 100, 100, 200};
short MegBm33_R[] = {150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,         150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,   150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,    150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,             150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,         150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,   150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,    150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50};

short MegBm41[]   = {Bb/8,     C/4,       B/8,         B/8,       Bb/8,        C/4,       B/8,        B/8, -1};
short MegBm41_L[] = {4*500,    4*500,     4*500,       4*500,     4*500,       4*500,     4*500,      4*500-50};
short MegBm41_R[] = {0,        0,         0,           0,         0,           0,         0,          50+50};

short MegBm49[]   = {Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8,   C/4, C/4, C/4, C/4, C/4, C/4, C/4, C/4, C/4, C/4,       D/4, D/4, D/4, D/4, Cs/4, Cs/4, Cs/4, Cs/4, Cs/4, Cs/4,	     C/4, C/4, C/4, C/4, B/8, B/8, B/8, B/8, B/8, B/8,      Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8,   C/4, C/4, C/4, C/4, C/4, C/4, C/4, C/4, C/4, C/4,       D/4, D/4, D/4, D/4, D/4, D/4, D/4, D/4, D/4, D/4,	     D/4, D/4, D/4, D/4, D/4, D/4, D/4, D/4, D/4, D/4,      Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8,   C/4, C/4, C/4, C/4, C/4, C/4, C/4, C/4, C/4, C/4,       D/4, D/4, D/4, D/4, Cs/4, Cs/4, Cs/4, Cs/4, Cs/4, Cs/4,	     C/4, C/4, C/4, C/4, B/8, B/8, B/8, B/8, B/8, B/8,       Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8, Bb/8,   C/4, C/4, C/4, C/4, C/4, C/4, C/4, C/4, C/4, C/4, -1};
short MegBm49_L[] = {};
short MegBm49_R[] = {150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,         150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,   150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,        150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,  150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,         150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,   150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,  150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,  150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,         150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,   150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,          150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,   150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,         150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50};

short MegBm63[]   = {D/4, D/4, D/4, D/4, D/4, D/4, D/4, D/4, D/4, D/4,	     D/4, D/4, D/4, D/4, D/4, D/4, D/4, D/4, D/4, D/4,      0, -1};
short MegBm63_L[] = {100, 100, 100, 100, 100, 100, 100, 100, 100, 200,      100, 100, 100, 100, 100, 100, 100, 100, 100, 200,      0};
short MegBm63_R[] = {150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,  150, 150, 25, 25+125, 25+125, 25+125, 25, 25, 25, 50,  4*500*6};


short* MegMelody[]   = {MegMm1, MegMm5, MegMm9, MegMm13, MegMm17, MegMm21, MegMm25, MegMm25, MegMm33, MegMm41, MegMm49, MegMm63};
short* MegMelody_L[] = {MegMm1_L, MegMm5_L, MegMm9_L, MegMm13_L, MegMm17_L, MegMm21_L, MegMm25_L, MegMm25_L, MegMm33_L, MegMm41_L, MegMm49_L, MegMm63_L};
short* MegMelody_R[] = {MegMm1_R, MegMm5_R, MegMm9_R, MegMm13_R, MegMm17_R, MegMm21_R, MegMm25_R, MegMm25_R, MegMm33_R, MegMm41_R, MegMm49_R, MegMm63_R};

short* MegHarmony[]   = {MegHm1, MegHm5, MegHm9, MegHm13, MegHm17, MegHm21, MegHm25, MegHm25, MegHm33, MegHm41, MegHm49, MegHm63};
short* MegHarmony_L[] = {MegHm1_L, MegHm5_L, MegHm9_L, MegHm13_L, MegHm17_L, MegHm21_L, MegHm25_L, MegHm25_L, MegHm33_L, MegHm41_L, MegHm49_L, MegHm63_L};
short* MegHarmony_R[] = {MegHm1_R, MegHm5_R, MegHm9_R, MegHm13_R, MegHm17_R, MegHm21_R, MegHm25_R, MegHm25_R, MegHm33_R, MegHm41_R, MegHm49_R, MegHm63_R};

short* MegBass[]   = {MegBm1, MegBm5, MegBm9, MegBm13, MegBm17, MegBm21, MegBm25, MegBm25, MegBm33, MegBm41, MegBm49, MegBm63};
short* MegBass_L[] = {MegBm1_L, MegBm5_L, MegBm9_L, MegBm13_L, MegBm17_L, MegBm21_L, MegBm25_L, MegBm25_L, MegBm33_L, MegBm41_L, MegBm49_L, MegBm63_L};
short* MegBass_R[] = {MegBm1_R, MegBm5_R, MegBm9_R, MegBm13_R, MegBm17_R, MegBm21_R, MegBm25_R, MegBm25_R, MegBm33_R, MegBm41_R, MegBm49_R, MegBm63_R};






short HKMm1[]   = {C*4, C*4, D*4, Eb*4,     D*4,         C*4, G*2, Ab*2, G*2, F*2,    G*2,         C*4, C*4, D*4, Eb*4,     F*4,          G*4, Eb*4, D*4, C*4, Bb*2,     C*4,          F, -1};
short HKMm1_L[] = {1040, 1040, 500, 500,    1090*3-50,   500, 500, 1040, 500, 500,    1090*3-50,   1040, 1040, 500, 500,    1090*3-50,    500, 500, 500, 500, 1040,      1090*3-50,    1090*2-50-200};
short HKMm1_R[] = {50, 50, 45, 45,          50,          45, 45, 50, 45, 45,          50,          50, 50, 45, 45,          50,           45, 45, 45, 45, 50,            50+200,       50+1090};

short HKMm10[]   = {C*2, C*2, D*2, Eb*2,     D*2,          C*2, G, Ab, G, F,           G,            C*2, C*2, D*2, Eb*2,      F*2, G*2, Ab*2,            G*2, Eb*2, Bb,             C*2, Bb, F, -1};
short HKMm10_L[] = {1040, 1040, 500, 500,    3*1090-50,    500, 500, 1040, 500, 500,   3*1090-50,    1040, 1040, 500, 500,     2*1090+545-50, 222, 222,   1040, 1090+545-50, 500,    1040, 1090+545-50, 500};
short HKMm10_R[] = {50, 50, 45, 45,          50,           45, 45, 50, 45, 45,         50,           50, 50, 45, 45,           50, 50, 51,                50, 50, 45,                50, 50, 45};

short HKMm18[]   = {G,           G,                    B,        B, C*2,              C*2, D*2, Eb*2,             F*2, G*2,           G*2, Bb*2,                 C*4, -1};
short HKMm18_L[] = {3*1090-50,   3*1090*2-545-50,      500,      1040, 2*1090-50,     2*1090+363-50, 313, 314,    1040, 2*1090-50,    2*1090-50, 1090+545-50,    4*1090-50};
short HKMm18_R[] = {50+3*1090,   50,                   45,       50, 50,              50, 50, 50,                 50, 50,             50, 50,                    50+1000};



short HKHm1[]   = {C, G, Ab,              C, F, G,                C, Eb, F,                C, D, Eb, D, Bb/2,           C, G, Ab,                 Bb/2, G, F,             Ab/2, Eb, F,            F/2, Bb/2, C, F, C, Bb/2,       C, -1};
short HKHm1_L[] = {500, 500, 1090*2-50,   500, 500, 1090*2-50,    500, 500, 1090*2-50,     500, 500, 500, 500, 1040,    500, 500, 1090*2-50,      500, 500, 1090*2-50,    500, 500, 1090*2-50,    500, 500, 500, 500, 500, 500,   1090*2-50-50};
short HKHm1_R[] = {45, 45, 50,            45, 45, 50,             45, 45, 50,              45, 45, 45, 45, 50,          45, 45, 50,               45, 45, 50,             45, 45, 50,             45, 45, 45, 45, 45, 45+50,      50+1090};

short HKHm10[]   = {C, C, D, Eb,             D,            C, G/2, Ab/2, G/2, F/2,     G/2,          C, C, D, Eb,              F, G, Ab,                  G, Eb, Bb,                 C, Bb/2, F, -1};
short HKHm10_L[] = {1040, 1040, 500, 500,    3*1090-50,    500, 500, 1040, 500, 500,   3*1090-50,    1040, 1040, 500, 500,     2*1090+545-50, 222, 222,   1040, 1090+545-50, 500,    1040, 1090+545-50, 500};
short HKHm10_R[] = {50, 50, 45, 45,          50,           45, 45, 50, 45, 45,         50,           50, 50, 45, 45,           50, 50, 51,                50, 50, 45,                50, 50, 45};

short HKHm18[]   = {C,              D/2, Bb/4, D/2, -1};
short HKHm18_L[] = {3*1090*2-50,    1040, 1040, 1040};
short HKHm18_R[] = {50+3*1090,      50, 50, 50+3*1090*5};




short HKBm1[]   = {A,            A/2, Eb/2, -1};
short HKBm1_L[] = {0,           2*1090-50, 1040};
short HKBm1_R[] = {3*1090*8,    50, 50};

short HKBm10[]   = {C/2, G/2, Ab/2,          C/2, F/2, G/2,          C/2, Eb/2, F/2,          Bb/4, Eb/2, D/2, Bb/4,     Ab/4, Eb/2, F/2,          F/4, C/2, F/2, G/2, Ab/2, C,     Eb/4, C/2, Eb/2, G/2, C, Eb,      Ab/4, Eb/2, Bb/4, F/2, D/2, -1};
short HKBm10_L[] = {500, 500, 2*1090-50,     500, 500, 2*1090-50,    500, 500, 2*1090-50,     500, 500, 1040, 1040,      500, 500, 2*1090-50,      500, 500, 500, 500, 500, 500,    500, 500, 500, 500, 500, 500,     500, 500, 500, 500, 1040};
short HKBm10_R[] = {45, 45, 50,              45, 45, 50,             45, 45, 50,              45, 45, 50, 50,            45, 45, 50,               45, 45, 45, 45, 45, 45,          45, 45, 45, 45, 45, 45,           45, 45, 45, 45, 50};

short HKBm18[]   = {C/2, G/2, Ab/2, G/2, Ab/2, G/2,      C/2, F/2, G/2, F/2, G/2, F/2,       C/2, Eb/2, F/2, Eb/2, F/2, Eb/2,     Bb/4, F/4, Bb/4,      C/2, G/2, Ab/2, G/2, Ab/2, G/2,      C/2, F/2, G/2, F/2, G/2, F/2,       C/2, Eb/2, F/2, Eb/2, F/2, Eb/2,     Bb/4, D/2, F/2, Bb/2, D,             C, -1};
short HKBm18_L[] = {500, 500, 500, 500, 500, 500,        500, 500, 500, 500, 500, 500,       500, 500, 500, 500, 500, 500,        1040, 1040, 1040,     500, 500, 500, 500, 500, 500,        500, 500, 500, 500, 500, 500,       500, 500, 500, 500, 500, 500,        500, 500, 500, 500, 1090+545-50,     4*1090-50};
short HKBm18_R[] = {45, 45, 45, 45, 45, 45,              45, 45, 45, 45, 45, 45,             45, 45, 45, 45, 45, 45,              50, 50, 50,           45, 45, 45, 45, 45, 45,              45, 45, 45, 45, 45, 45,             45, 45, 45, 45, 45, 45,              45, 45, 45, 45, 50,                  50};



short* HKMelody[]   = {HKMm1, HKMm10, HKMm18};
short* HKMelody_L[] = {HKMm1_L, HKMm10_L, HKMm18_L};
short* HKMelody_R[] = {HKMm1_R, HKMm10_R, HKMm18_R};

short* HKHarmony[]   = {HKHm1, HKHm10, HKHm18};
short* HKHarmony_L[] = {HKHm1_L, HKHm10_L, HKHm18_L};
short* HKHarmony_R[] = {HKHm1_R, HKHm10_R, HKHm18_R};

short* HKBass[]   = {HKBm1, HKBm10, HKBm18};
short* HKBass_L[] = {HKBm1_L, HKBm10_L, HKBm18_L};
short* HKBass_R[] = {HKBm1_R, HKBm10_R, HKBm18_R};



short KFMm1[]   = {A,        G*2, D*4,              C*4, G*2,              A*2, D*2,              F*2, C*2,           D*2, G*2, D*4,                     C*4, G*2,              A*2, D*2,             F*2, C*2, -1};
short KFMm1_L[] = {0,        100, 309+2*618-50,     100, 309+2*618-50,     100, 309+2*618-50,     100, 200,           309+618-50, 100, 309+2*618-50,     100, 309+2*618-50,     100, 309+2*618-50,    100, 200};
short KFMm1_R[] = {3*618,    209, 50+618,           209, 50+618,           209, 50+618,           209, 109+309,       50+618, 209, 50+618,               209, 50+618,           209, 50+618,          209, 109+618+309};

short KFMm9[]   = {D*2, G, D*2,                C*2, Bb, A, F, G, D*2, D*2,               F*2, C*2, D*2, G, D*2,                 C*2, Bb, A, G, A, D, G, -1};
short KFMm9_L[] = {309+618-50, 100, 618-50,    100, 100, 259, 259, 259, 100, 618-50,     259, 100, 309+618-50, 100, 618-50,     100, 100, 259, 259, 618-50, 100, 100};
short KFMm9_R[] = {50, 209, 50,                54, 55, 50, 50, 50, 209, 50+309,          50, 209, 50, 209, 50,                  54, 55, 50, 50, 50, 209-50, 209+309};

short KFMm13[]   = {D*2, G*2, D*4,              C*4, G*2,              A*2, D*2,              F*2, C*2,           D*2, G*2, D*4,                     C*4, G*2,              A*2, D*2,             F*2, C*2, -1};
short KFMm13_L[] = {100, 100, 309+2*618-50,     100, 309+2*618-50,     100, 309+2*618-50,     100, 200,           309+618-50, 100, 309+2*618-50,     100, 309+2*618-50,     100, 309+2*618-50,    100, 200};
short KFMm13_R[] = {209+2*618, 209, 50+618,     209, 50+618,           209, 50+618,           209, 109+309,       50+618+50, 209, 50+618,            209, 50+618,           209, 50+618,          209, 109+309};

short KFMm21[]   = {D*2, G, D, G, D*2,               D*2, C*2, Bb,          C*2, F, Eb, D,                 Eb, Bb, A, G,                 A, D, G, D*2,                            G*2, F*2, -1};
short KFMm21_L[] = {100, 2*618-50, 259, 259, 259,    2*618-50, 259, 259,    100, 309+618-50, 259, 259,     100, 309+618-50, 259, 259,    100, 309+618-50, 100, 309+2*618-50,      100, 309+618-50};
short KFMm21_R[] = {209+309, 50, 50, 50, 50,         50+618, 50, 50,        209, 50+618, 50, 50,           209, 50+618, 50, 50,          209, 50+618, 209, 50+618,                209, 50+309};

short KFMm28[]   = {C*2, F, Bb, C*2, Db*2, Eb*2,          F*2, Eb*2, Db*2, C*2, Bb, Ab, Bb, G, Eb,        F, F*2, D*2, G*2,                      D, Eb, D, Eb, F, G, F, G, A*2, D*2,                      F, G, A, Bb, C, -1};
short KFMm28_L[] = {618-50, 100, 100, 100, 100, 100,      259, 100, 100, 100, 100, 259, 100, 100, 100,    618-50, 618-50, 618-50, 309+618-50,    100, 100, 100, 100, 100, 100, 100, 100, 100, 618-50,     100, 100, 100, 100, 309+2*618};
short KFMm28_R[] = {50, 209, 54, 55, 54, 55,              50, 54, 55, 209, 209, 50, 209, 209, 209,        50, 50, 50+309, 50,                    54, 55, 54, 55, 54, 55, 54, 55, 209, 50,                 54, 55, 54, 55, 50+1000};

short KFHm1[]   = {A, F, E,                F, E,              F, E,               F, E,              F, E,               F, E,             F, E,             F, E, -1};
short KFHm1_L[] = {0, 100, 2*618-50,       100, 2*618-50,     100, 2*618-50,      100, 2*618-50,     100, 2*618-50,      100, 2*618-50,    100, 2*618-50,    100, 2*618-50};
short KFHm1_R[] = {309, 209+618, 50+309,   209+618, 50+309,   209+618, 50+309,    209+618, 50+309,   209+618, 50+309,    209+618, 50+309,  209+618, 50+309,  209+618, 50+309};

short KFHm9[]   = {G, Ab/2,              D,            C, D,                  D, D, D,                  D, D, -1};
short KFHm9_L[] = {100, 309+618-50,      4*618-50,     618-50, 309+618-50,    2*618-50, 618-50, 100,    100, 309+618-50};
short KFHm9_R[] = {209+309, 50+618,      50,           50+309, 50+618,        50, 50+309, 209+309,      209+309, 50+618+359};

short KFHm14[]   = {F, E,              F, E,               F, E,              F, E,               F, E,             F, E,            Eb, D, D, -1};
short KFHm14_L[] = {100, 2*618-50,     100, 2*618-50,      100, 2*618-50,     100, 2*618-50,      100, 2*618-50,    100, 2*618-50,   100, 309+618-50, 100};
short KFHm14_R[] = {209+618, 50+309,   209+618, 50+309,    209+618, 50+309,   209+618, 50+329,    209+618, 50+309,  209+618, 50+309, 209+618, 50, 209+309};

short KFHm21[]   = {C, D,                        D, D,                       C, C,                      D, D,                      A/2, A/2,             D, D,                      C, Cb, -1};
short KFHm21_L[] = {100, 2*618-50,               259, 259,                   259, 259,                  259, 259,                  259, 618-50,          259, 259,                  259, 309+618-50};
short KFHm21_R[] = {209+309, 50+309+618+309,     50+618, 50+309+618+309,     50+618, 50+309+618+309,    50+618, 50+309+618+309,    50+618, 50+618+309,   50+618, 50+309+618+309,    50+309, 50+618};

short KFHm28[]   = {F, Eb, Bb/2, A/2,            D, C,                    Bb/2, C, Bb/2, C, D, Eb, D, Eb, A, D,                  D, Eb, F, G, E, -1};
short KFHm28_L[] = {618-50, 100, 618-50, 100,    2*618-50, 2*618-50,      100, 100, 100, 100, 100, 100, 100, 100, 100, 618-50,   100, 100, 100, 100, 309+2*618-50};
short KFHm28_R[] = {50, 209+309, 50, 209+309,    50, 50+618,              54, 55, 54, 55, 54, 55, 54, 55, 209, 50,               54, 55, 54, 55, 50};



short KFBm1[]   = {A, G/4, Bb/2, G/4, A/2,        G/4, Bb/2, G/4, A/2,         G/4, Bb/2, G/4, A/2,        G/4, Bb/2, G/4, A/2,       G/4, Bb/2, G/4, A/2,         G/4, Bb/2, G/4, A/2,        G/4, Bb/2, G/4, A/2,       G/4, Bb/2, G/4, A/2, -1};
short KFBm1_L[] = {0, 100, 100, 100, 2*618-50,    100, 100, 100, 2*618-50,     100, 100, 100, 2*618-50,    100, 100, 100, 2*618-50,   100, 100, 100, 2*618-50,     100, 100, 100, 2*618-50,    100, 100, 100, 2*618-50,   100, 100, 100, 2*618-50};
short KFBm1_R[] = {0, 209, 209+309, 209, 50,      209, 209+309, 209, 50,       209, 209+309, 209, 50,      209, 209+309, 209, 40,     209, 209+309, 209, 50,       209, 209+309, 209, 50,      209, 209+309, 209, 50,     209, 209+309, 209, 40};

short KFBm9[]   = {F/4, Ab, Bb/4,            Eb/2,          D/2, G/2,              C/2, D/2, Eb/2,            F/2, G/2, -1};
short KFBm9_L[] = {100, 100, 309+618-50,     4*618-50,      618-50, 309+618-50,    2*618-50, 618-50, 100,     100, 309+618-50};
short KFBm9_R[] = {209, 209+309, 50+618,     50,            50+309, 50+618,        50, 50+309, 209+309,       209+309, 50+618};

short KFBm14[]   = {G/4, Bb/2, G/4, A/2,        G/4, Bb/2, G/4, A/2,         G/4, Bb/2, G/4, A/2,        G/4, Bb/2, G/4, A/2,       G/4, Bb/2, G/4, A/2,         G/4, Bb/2, G/4, A/2,             F/4, Ab/2, Bb/4, Ab/2, Eb/2, -1};
short KFBm14_L[] = {100, 100, 100, 2*618-50,    100, 100, 100, 2*618-50,     100, 100, 100, 2*618-50,    100, 100, 100, 2*618-50,   100, 100, 100, 2*618-50,     100, 100, 100, 2*618-50,         100, 100, 100, 309+618-50, 100};
short KFBm14_R[] = {209, 209+309, 209, 50,      209, 209+309, 209, 50,       209, 209+309, 209, 50,      209, 209+309, 209, 50,     209, 209+309, 209, 50,       209, 209+309, 209, 50,           209, 209+309, 209, 50, 209+309};

short KFBm21[]   = {D/2, G/2,              Eb/2, G/2, Eb/2, G/2,           D/2, F/2, D/2, F/2,              C/2, Eb/2, C/2, Eb/2,           Bb/4, D/2, Bb/4, D/2,       Eb/2, G/2, Eb/2, G/2,          D/2, F/2, Db/2, -1};
short KFBm21_L[] = {100, 2*618-50,         259, 259, 259, 259,             259, 259, 259, 259,              259, 259, 259, 259,             259, 259, 259, 618-50,      259, 259, 259, 259,            259, 259, 309+618-50};
short KFBm21_R[] = {209+309, 50+309+618,   50, 50+309, 50, 50+309+618,     50, 50+309, 50, 50+309+618,      50, 50+309, 50, 50+309+618,     50, 50+309, 50, 50+618,     50, 50+309, 50, 50+309+618,    50, 50+309, 50+618};

short KFBm28[]   = {Gb/2, Ab/2, Cb/2, Db/2,       Eb/2, D/2,             G/4, Bb/2, G/4, A/2,        G/4, Bb/2, D/2, -1};
short KFBm28_L[] = {618-50, 100, 618-50, 100,     2*618-50, 2*618-50,    259, 259, 259, 2*618-50,    259, 259, 309+2*618-50};
short KFBm28_R[] = {50, 209+309, 50, 209+309,     50, 50,                50, 50+309, 50, 50,         50, 50+309, 50};



short* KFMelody[]   = {KFMm1, KFMm9, KFMm13, KFMm21, KFMm28};
short* KFMelody_L[] = {KFMm1_L, KFMm9_L, KFMm13_L, KFMm21_L, KFMm28_L};
short* KFMelody_R[] = {KFMm1_R, KFMm9_R, KFMm13_R, KFMm21_R, KFMm28_R};

short* KFHarmony[]   = {KFHm1, KFHm9, KFHm14, KFHm21, KFHm28};
short* KFHarmony_L[] = {KFHm1_L, KFHm9_L, KFHm14_L, KFHm21_L, KFHm28_L};
short* KFHarmony_R[] = {KFHm1_R, KFHm9_R, KFHm14_R, KFHm21_R, KFHm28_R};

short* KFBass[]   = {KFBm1, KFBm9, KFBm14, KFBm21, KFBm28};
short* KFBass_L[] = {KFBm1_L, KFBm9_L, KFBm14_L, KFBm21_L, KFBm28_L};
short* KFBass_R[] = {KFBm1_R, KFBm9_R, KFBm14_R, KFBm21_R, KFBm28_R};



short** playlistMel[]   = {MegMelody, HKMelody, KFMelody};
short** playlistMelNL[] = {MegMelody_L, HKMelody_L, KFMelody_L};
short** playlistMelRL[] = {MegMelody_R, HKMelody_R, KFMelody_R};

short** playlistHar[]   = {MegHarmony, HKHarmony, KFHarmony};
short** playlistHarNL[] = {MegHarmony_L, HKHarmony_L, KFHarmony_L};
short** playlistHarRL[] = {MegHarmony_R, HKHarmony_R, KFHarmony_R};

short** playlistBas[]   = {MegBass, HKBass, KFBass};
short** playlistBasNL[] = {MegBass_L, HKBass_L, KFBass_L};
short** playlistBasRL[] = {MegBass_R, HKBass_R, KFBass_R};

char numRows[] = {12, 3, 5};

unsigned char prevSong;
unsigned char nextSong;
//these states below indicate that the song/mp3 player either paused or done playing music.
unsigned char paused = 1;
unsigned char songDone = 1;
unsigned long playList = sizeof(playlistMel) / sizeof(playlistMel[0]);

//PB6


enum MelodyStates{Minit, Mwait, Mplay, Ml, Mr, Mp};
int melodyTick(int state) {
	static unsigned short it1;
	static unsigned short it2;
	static unsigned short it3;
	static unsigned char it4 = 0;
	static unsigned char placeHolder;
	switch(state) {
		case Minit:
			state= Mwait;
			it1 = 0;
			it2 = 0;
			it3 = 0;
			it4 = 1;
			prevSong = 0;
			nextSong = 0;
			silence();
			break;

		case Mwait:
			if (!paused) {
				state= Mplay;
			}
			else {
				state= Mwait;
			}
			break;

		case Mplay:
			songDone = 0;
			if (paused) {
				silence();
				placeHolder = state;
				state = Mp;
				break;
			}
			if (prevSong && (it1 == 0)) {
				it1 = 0;
				it2 = 0;
				it3 = 0;
				if (it4 == 0) {
					it4 = playList - 1;
				}
				else {
					it4--;
				}
				state = Mplay;
				break;
			}
			else if (prevSong){
				it1 = 0;
				it2 = 0;
				it3 = 0;
				state = Mplay;
				break;
		}
		if (nextSong) {
			it1 = 0;
			it2 = 0;
			it3 = 0;
			it4 = it4 + 1;;
			if (it4 == playList) {
				it4 = 0;
			}
			state = Mplay;
			break;
		}
		if (playlistMel[it4][it1][it2] == -1) {
			it1 = it1 + 1;
			it2 = 0;
		}
		if (it1 == numRows[it4]) {
			songDone = 1;
			state = Mwait;
			it1 = 0;
			it2 = 0;
			it3 = 0;
			it4 = it4 + 1;
			if (it4 == playList) {
				it4 = 0;
			}
			break;
		}
		play(playlistMel[it4][it1][it2]);
		state = Ml;
		break;

		case Ml:
		if (paused) {
			silence();
			placeHolder = state;
			state = Mp;
			break;
		}
		if (prevSong && (it1 == 0)) {
			it1 = 0;
			it2 = 0;
			it3 = 0;
			if (it4 == 0) {
				it4 = playList - 1;
				}
			else {
				it4--;
			}
			state = Mplay;
			break;
    } else if (prevSong){
			it1 = 0;
			it2 = 0;
			it3 = 0;
			state = Mplay;
			break;
		}
		if (nextSong) {
			it1 = 0;
			it2 = 0;
			it3 = 0;
			it4 = it4 + 1;
			if (it4 == playList) {
				it4 = 0;
			}
			state = Mplay;
			break;
		}
		if (it3 < playlistMelNL[it4][it1][it2]) {
			it3 = it3 + 1;
			state = Ml;
			}
			else {
				it3 = 0;
				silence();
				state = Mr;
		}
		break;

		case Mr:
		if (paused) {
			silence();
			placeHolder = state;
			state = Mp;
			break;
		}
		if (prevSong && (it1 == 0)) {
			it1 = 0;
			it2 = 0;
			it3 = 0;
			if (it4 == 0) {
				it4 = playList - 1;
				} else {
				it4--;
			}
			state = Mplay;
			break;
    } else if (prevSong){
			it1 = 0;
			 it2 = 0;
			  it3 = 0;
			state = Mplay;
			break;
		}
		if (nextSong) {
			it1 = 0;
			 it2 = 0;
			 it3 = 0;
			it4 = it4 + 1;
			if (it4 == playList) {
				it4 = 0;
			}
			state = Mplay;
			break;
		}
		if (it3 < playlistMelRL[it4][it1][it2]) {
			it3 = it3 + 1;
			state = Mr;
			} else {
			it3 = 0;
			it2 = it2 + 1;
			state = Mplay;
		}
		break;

		case Mp:
		if (prevSong && (it1 == 0)) {
			it1 = 0;
			it2 = 0;
			it3 = 0;
			if (it4 == 0) {
				it4 = playList - 1;
				} else {
				it4--;
			}
			paused = 0;
			state = Mplay;
			break;
    } else if (prevSong){
			it1 = 0;
			it2 = 0;
			it3 = 0;
			paused = 0;
			state = Mplay;
			break;
		}
		if (nextSong) {
			it1 = 0;
			it2 = 0;
			it3 = 0;
			it4 = it4 + 1;
			if (it4 == playList) {
				it4 = 0;
			}
			paused = 0;
			state = Mplay;
			break;
		}
		if (paused) {
			state = Mp;
			} else {
			if (placeHolder == Ml) {
				play(playlistMel[it4][it1][it2]);
			}
			state = placeHolder;
		}
		break;
	}
	return state;
}

enum HarmonyStates{Hinit, Hwait, Hplay, Hl, Hr, Hp};
int harmonyTick(int state) {
	static unsigned short it1;
	static unsigned short it2;
	static unsigned short it3;
	static unsigned char it4 = 0;
	static unsigned char placeHolder;
	switch(state) {
		case Hinit:
		state= Hwait;
		it1 = 0;
		it2 = 0;
		it3 = 0;
		it4 = 1;
		prevSong = 0;
		nextSong = 0;
		silenceH();
		break;

		case Hwait:
		if (!paused) {
			state= Hplay;
		}
		else {
			state= Mwait;
		}
		break;

		case Hplay:
		songDone = 0;
		if (paused) {
			silenceH();
			placeHolder = state;
			state = Hp;
			break;
		}
		if (prevSong && (it1 == 0)) {
			it1 = 0;
			it2 = 0;
			it3 = 0;
			if (it4 == 0) {
				it4 = playList - 1;
			}
			else {
				it4--;
			}
			state = Hplay;
			break;
		}
		else if (prevSong){
			it1 = 0;
			it2 = 0;
			it3 = 0;
			state = Hplay;
			break;
		}
		if (nextSong) {
			it1 = 0;
			it2 = 0;
			it3 = 0;
			it4 = it4 + 1;;
			if (it4 == playList) {
				it4 = 0;
			}
			state = Hplay;
			break;
		}
		if (playlistHar[it4][it1][it2] == -1) {
			it1 = it1 + 1;
			it2 = 0;
		}
		if (it1 == numRows[it4]) {
			songDone = 1;
			state = Hwait;
			it1 = 0;
			it2 = 0;
			it3 = 0;
			it4 = it4 + 1;
			if (it4 == playList) {
				it4 = 0;
			}
			break;
		}
		playH(playlistHar[it4][it1][it2]);
		state = Hl;
		break;

		case Ml:
		if (paused) {
			silenceH();
			placeHolder = state;
			state = Hp;
			break;
		}
		if (prevSong && (it1 == 0)) {
			it1 = 0;
			it2 = 0;
			it3 = 0;
			if (it4 == 0) {
				it4 = playList - 1;
			}
			else {
				it4--;
			}
			state = Hplay;
			break;
			} else if (prevSong){
			it1 = 0;
			it2 = 0;
			it3 = 0;
			state = Hplay;
			break;
		}
		if (nextSong) {
			it1 = 0;
			it2 = 0;
			it3 = 0;
			it4 = it4 + 1;
			if (it4 == playList) {
				it4 = 0;
			}
			state = Hplay;
			break;
		}
		if (it3 < playlistHarNL[it4][it1][it2]) {
			it3 = it3 + 1;
			state = Hl;
		}
		else {
			it3 = 0;
			silenceH();
			state = Hr;
		}
		break;

		case Hr:
		if (paused) {
			silenceH();
			placeHolder = state;
			state = Hp;
			break;
		}
		if (prevSong && (it1 == 0)) {
			it1 = 0;
			it2 = 0;
			it3 = 0;
			if (it4 == 0) {
				it4 = playList - 1;
				} else {
				it4--;
			}
			state = Hplay;
			break;
			} else if (prevSong){
			it1 = 0;
			it2 = 0;
			it3 = 0;
			state = Hplay;
			break;
		}
		if (nextSong) {
			it1 = 0;
			it2 = 0;
			it3 = 0;
			it4 = it4 + 1;
			if (it4 == playList) {
				it4 = 0;
			}
			state = Hplay;
			break;
		}
		if (it3 < playlistHarRL[it4][it1][it2]) {
			it3 = it3 + 1;
			state = Hr;
			} else {
			it3 = 0;
			it2 = it2 + 1;
			state = Hplay;
		}
		break;

		case Hp:
		if (prevSong && (it1 == 0)) {
			it1 = 0;
			it2 = 0;
			it3 = 0;
			if (it4 == 0) {
				it4 = playList - 1;
				} else {
				it4--;
			}
			paused = 0;
			state = Hplay;
			break;
			} else if (prevSong){
			it1 = 0;
			it2 = 0;
			it3 = 0;
			paused = 0;
			state = Hplay;
			break;
		}
		if (nextSong) {
			it1 = 0;
			it2 = 0;
			it3 = 0;
			it4 = it4 + 1;
			if (it4 == playList) {
				it4 = 0;
			}
			paused = 0;
			state = Hplay;
			break;
		}
		if (paused) {
			state = Hp;
			} else {
			if (placeHolder == Hl) {
				playH(playlistHar[it4][it1][it2]);
			}
			state = placeHolder;
		}
		break;
	}
	return state;
}

enum BassStates{Binit, Bwait, Bplay, Bl, Br, Bp};
int bassTick(int state) {
	static unsigned short it1;
	static unsigned short it2;
	static unsigned short it3;
	static unsigned char it4 = 0;
	static unsigned char placeHolder;
	switch(state) {
		case Binit:
		state= Bwait;
		it1 = 0;
		it2 = 0;
		it3 = 0;
		it4 = 1;
		prevSong = 0;
		nextSong = 0;
		silenceB();
		break;

		case Bwait:
		if (!paused) {
			state= Bplay;
		}
		else {
			state= Bwait;
		}
		break;

		case Bplay:
		songDone = 0;
		if (paused) {
			silenceB();
			placeHolder = state;
			state = Bp;
			break;
		}
		if (prevSong && (it1 == 0)) {
			it1 = 0;
			it2 = 0;
			it3 = 0;
			if (it4 == 0) {
				it4 = playList - 1;
			}
			else {
				it4--;
			}
			state = Bplay;
			break;
		}
		else if (prevSong){
			it1 = 0;
			it2 = 0;
			it3 = 0;
			state = Bplay;
			break;
		}
		if (nextSong) {
			it1 = 0;
			it2 = 0;
			it3 = 0;
			it4 = it4 + 1;;
			if (it4 == playList) {
				it4 = 0;
			}
			state = Bplay;
			break;
		}
		if (playlistBas[it4][it1][it2] == -1) {
			it1 = it1 + 1;
			it2 = 0;
		}
		if (it1 == numRows[it4]) {
			songDone = 1;
			state = Bwait;
			it1 = 0;
			it2 = 0;
			it3 = 0;
			it4 = it4 + 1;
			if (it4 == playList) {
				it4 = 0;
			}
			break;
		}
		playB(playlistBas[it4][it1][it2]);
		state = Bl;
		break;

		case Bl:
		if (paused) {
			silenceB();
			placeHolder = state;
			state = Bp;
			break;
		}
		if (prevSong && (it1 == 0)) {
			it1 = 0;
			it2 = 0;
			it3 = 0;
			if (it4 == 0) {
				it4 = playList - 1;
			}
			else {
				it4--;
			}
			state = Bplay;
			break;
			} else if (prevSong){
			it1 = 0;
			it2 = 0;
			it3 = 0;
			state = Bplay;
			break;
		}
		if (nextSong) {
			it1 = 0;
			it2 = 0;
			it3 = 0;
			it4 = it4 + 1;
			if (it4 == playList) {
				it4 = 0;
			}
			state = Bplay;
			break;
		}
		if (it3 < playlistBasNL[it4][it1][it2]) {
			it3 = it3 + 1;
			state = Hl;
		}
		else {
			it3 = 0;
			silenceB();
			state = Br;
		}
		break;

		case Br:
		if (paused) {
			silenceB();
			placeHolder = state;
			state = Bp;
			break;
		}
		if (prevSong && (it1 == 0)) {
			it1 = 0;
			it2 = 0;
			it3 = 0;
			if (it4 == 0) {
				it4 = playList - 1;
				} else {
				it4--;
			}
			state = Bplay;
			break;
			} else if (prevSong){
			it1 = 0;
			it2 = 0;
			it3 = 0;
			state = Bplay;
			break;
		}
		if (nextSong) {
			it1 = 0;
			it2 = 0;
			it3 = 0;
			it4 = it4 + 1;
			if (it4 == playList) {
				it4 = 0;
			}
			state = Bplay;
			break;
		}
		if (it3 < playlistBasRL[it4][it1][it2]) {
			it3 = it3 + 1;
			state = Br;
			} else {
			it3 = 0;
			it2 = it2 + 1;
			state = Bplay;
		}
		break;

		case Bp:
		if (prevSong && (it1 == 0)) {
			it1 = 0;
			it2 = 0;
			it3 = 0;
			if (it4 == 0) {
				it4 = playList - 1;
				} else {
				it4--;
			}
			paused = 0;
			state = Bplay;
			break;
			} else if (prevSong){
			it1 = 0;
			it2 = 0;
			it3 = 0;
			paused = 0;
			state = Bplay;
			break;
		}
		if (nextSong) {
			it1 = 0;
			it2 = 0;
			it3 = 0;
			it4 = it4 + 1;
			if (it4 == playList) {
				it4 = 0;
			}
			paused = 0;
			state = Bplay;
			break;
		}
		if (paused) {
			state = Bp;
			} else {
			if (placeHolder == Bl) {
				playB(playlistBas[it4][it1][it2]);
			}
			state = placeHolder;
		}
		break;
	}
	return state;
}



enum Pauses{Pinit, Pp, Pr};
int pauseTick(int state) {
	unsigned char playPause = PINA & 0x01;
	switch(state) {
		case Pinit:
		paused = 1;
		state = Pp;
		break;
		case Pp:
		if (playPause) {
			state = Pr;
			paused = !paused;
		}
		else {
			state = Pp;
		}
		break;
		case Pr:
		if (playPause) {
			state = Pr;
		}
		else {
			state = Pp;
		}
		break;
		default:
		state = Pinit;
		break;
	}
	return state;
}

enum nextPrevStates{Pw, backSong, forSong};
int NextPrevTick(int state) {
	//unsigned char NextPrevButton = 0;
  unsigned char nextButton = PINA & 0x04;
  unsigned char prevButton = PINA & 0x02;
	switch(state) {
		case Pw:
		if (prevButton && !nextButton) {
			prevSong = 1;
			state = backSong;
		}
		else if (nextButton && !prevButton) {
			nextSong = 1;
			state = forSong;
		}
		else {
			prevSong = 0;
			nextSong = 0;
			state = Pw;
		}
		break;
		case backSong:
		if (prevButton && !nextButton) {
			state = backSong;
		}
		else {
			state = Pw;
		}
		break;

		case forSong:
		if (nextButton && !prevButton) {
			state = forSong;
		}
		else {
			state = Pw;
		}
		break;
		default:
		state = Pw;
		break;
	}
	return state;
}




int main(void) {
    /* Insert DDR and PORT initializations */
	DDRA = 0x00;
	PORTA = 0x00;
	DDRB = 0xFF;
	PORTB = 0x00;
	DDRC = 0xFF;
	PORTC = 0x00;
	DDRD = 0xF0;
	PORTD = 0x00;


  unsigned char timerPeriod = 1;
  static task task1, task2, task3, task4, task5;
  task *tasks[] = { &task1, &task2, &task3, &task4, &task5};
  const unsigned short taskNum = sizeof(tasks) / sizeof(*tasks);

  task1.state = 0;
  task1.period = 1;
  task1.elapsedTime = task1.period;
  task1.TickFct = &melodyTick;

  task2.state = 0;
  task2.period = 1;
  task2.elapsedTime = task2.period;
  task2.TickFct = &harmonyTick;

  task3.state = 0;
  task3.period = 1;
  task3.elapsedTime = task3.period;
  task3.TickFct = &bassTick;

  task4.state = 0;
  task4.period = 1;
  task4.elapsedTime = task4.period;
  task4.TickFct = &pauseTick;

  task5.state = 0;
  task5.period = 1;
  task5.elapsedTime = task5.period;
  task5.TickFct = &NextPrevTick;



	//unsigned char numVals;
	//unsigned char playButton;
	//unsigned short i;
	//unsigned short j;
	//char soundBuzzer = 0;
	//char soundBuzzerHarmony = 0;

    /* Insert your solution below */
	TimerSet(timerPeriod);
	TimerOn();

	PWM_on();
	PWMH_on();
  PWMB_on();

    while (1) {
			for (unsigned char i = 0; i < taskNum; i++) {
				if ( tasks[i]->elapsedTime == tasks[i]->period) {
					tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
					tasks[i]->elapsedTime = 0;
				}
				tasks[i]->elapsedTime += timerPeriod;
			}
		}
		while(!TimerFlag){};
			TimerFlag = 0;

    return 1;
}
